/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BCakeProxyInterface extends utils.Interface {
  functions: {
    "FARM_BOOSTER_PROXY_FACTORY()": FunctionFragment;
    "admin()": FunctionFragment;
    "cakeToken()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "farmBooster()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "lpApproved(address)": FunctionFragment;
    "masterchefV2()": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FARM_BOOSTER_PROXY_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "cakeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "farmBooster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpApproved", values: [string]): string;
  encodeFunctionData(
    functionFragment: "masterchefV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "FARM_BOOSTER_PROXY_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cakeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmBooster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpApproved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterchefV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "DepositByProxy(address,address,uint256,uint256)": EventFragment;
    "EmergencyWithdrawByProxy(address,address,uint256)": EventFragment;
    "WithdrawByProxy(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositByProxy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawByProxy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawByProxy"): EventFragment;
}

export type DepositByProxyEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; proxy: string; pid: BigNumber; amount: BigNumber }
>;

export type DepositByProxyEventFilter = TypedEventFilter<DepositByProxyEvent>;

export type EmergencyWithdrawByProxyEvent = TypedEvent<
  [string, string, BigNumber],
  { user: string; proxy: string; pid: BigNumber }
>;

export type EmergencyWithdrawByProxyEventFilter =
  TypedEventFilter<EmergencyWithdrawByProxyEvent>;

export type WithdrawByProxyEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; proxy: string; pid: BigNumber; amount: BigNumber }
>;

export type WithdrawByProxyEventFilter = TypedEventFilter<WithdrawByProxyEvent>;

export interface BCakeProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BCakeProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FARM_BOOSTER_PROXY_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    cakeToken(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmBooster(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _admin: string,
      _farmBooster: string,
      _masterchefV2: string,
      _cakeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    lpApproved(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    masterchefV2(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FARM_BOOSTER_PROXY_FACTORY(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  cakeToken(overrides?: CallOverrides): Promise<string>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmBooster(overrides?: CallOverrides): Promise<string>;

  initialize(
    _admin: string,
    _farmBooster: string,
    _masterchefV2: string,
    _cakeToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  lpApproved(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  masterchefV2(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FARM_BOOSTER_PROXY_FACTORY(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    cakeToken(overrides?: CallOverrides): Promise<string>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    farmBooster(overrides?: CallOverrides): Promise<string>;

    initialize(
      _admin: string,
      _farmBooster: string,
      _masterchefV2: string,
      _cakeToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    lpApproved(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    masterchefV2(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DepositByProxy(address,address,uint256,uint256)"(
      user?: string | null,
      proxy?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): DepositByProxyEventFilter;
    DepositByProxy(
      user?: string | null,
      proxy?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): DepositByProxyEventFilter;

    "EmergencyWithdrawByProxy(address,address,uint256)"(
      user?: string | null,
      proxy?: string | null,
      pid?: BigNumberish | null
    ): EmergencyWithdrawByProxyEventFilter;
    EmergencyWithdrawByProxy(
      user?: string | null,
      proxy?: string | null,
      pid?: BigNumberish | null
    ): EmergencyWithdrawByProxyEventFilter;

    "WithdrawByProxy(address,address,uint256,uint256)"(
      user?: string | null,
      proxy?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): WithdrawByProxyEventFilter;
    WithdrawByProxy(
      user?: string | null,
      proxy?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): WithdrawByProxyEventFilter;
  };

  estimateGas: {
    FARM_BOOSTER_PROXY_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    cakeToken(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmBooster(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _admin: string,
      _farmBooster: string,
      _masterchefV2: string,
      _cakeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    lpApproved(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    masterchefV2(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FARM_BOOSTER_PROXY_FACTORY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmBooster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      _farmBooster: string,
      _masterchefV2: string,
      _cakeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpApproved(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterchefV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
