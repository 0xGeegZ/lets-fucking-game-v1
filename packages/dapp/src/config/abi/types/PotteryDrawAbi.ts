/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type DrawStruct = {
  requestId: BigNumberish;
  vault: string;
  startDrawTime: BigNumberish;
  closeDrawTime: BigNumberish;
  winners: string[];
  prize: BigNumberish;
};

export type DrawStructOutput = [
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  string[],
  BigNumber
] & {
  requestId: BigNumber;
  vault: string;
  startDrawTime: BigNumber;
  closeDrawTime: BigNumber;
  winners: string[];
  prize: BigNumber;
};

export type PotStruct = {
  numOfDraw: BigNumberish;
  totalPrize: BigNumberish;
  drawTime: BigNumberish;
  lastDrawId: BigNumberish;
  startDraw: boolean;
};

export type PotStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean
] & {
  numOfDraw: BigNumber;
  totalPrize: BigNumber;
  drawTime: BigNumber;
  lastDrawId: BigNumber;
  startDraw: boolean;
};

export interface PotteryDrawAbiInterface extends utils.Interface {
  functions: {
    "cancelPottery(address)": FunctionFragment;
    "claimFee()": FunctionFragment;
    "claimReward()": FunctionFragment;
    "closeDraw(uint256)": FunctionFragment;
    "forceRequestDraw(address)": FunctionFragment;
    "generatePottery(uint256,uint256,uint256,uint256)": FunctionFragment;
    "getDraw(uint256)": FunctionFragment;
    "getNumOfDraw()": FunctionFragment;
    "getNumOfWinner()": FunctionFragment;
    "getPot(address)": FunctionFragment;
    "getPotteryPeriod()": FunctionFragment;
    "getTreasury()": FunctionFragment;
    "getWinners(uint256)": FunctionFragment;
    "init(address,address,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "redeemPrizeByRatio()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rngFulfillRandomWords(uint256)": FunctionFragment;
    "setClaimFee(uint16)": FunctionFragment;
    "setKeeper(address)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setVaultFactory(address)": FunctionFragment;
    "startDraw(address)": FunctionFragment;
    "timeToDraw(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userInfos(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelPottery",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "claimFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeDraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceRequestDraw",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "generatePottery",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumOfDraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumOfWinner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPot", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPotteryPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWinners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemPrizeByRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rngFulfillRandomWords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setKeeper", values: [string]): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVaultFactory",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "startDraw", values: [string]): string;
  encodeFunctionData(functionFragment: "timeToDraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "userInfos", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "cancelPottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeDraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceRequestDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generatePottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumOfDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumOfWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPotteryPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemPrizeByRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rngFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timeToDraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfos", data: BytesLike): Result;

  events: {
    "CancelPottery(address,uint256,address)": EventFragment;
    "ClaimReward(address,uint256,uint256,uint256)": EventFragment;
    "CloseDraw(uint256,address,uint256,address[],uint256,address)": EventFragment;
    "CreatePottery(address,uint256,uint256,uint256,uint256,address)": EventFragment;
    "Init(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RedeemPrize(address,uint256,uint256)": EventFragment;
    "SetClaimFee(address,uint16)": EventFragment;
    "SetKeeper(address,address)": EventFragment;
    "SetTreasury(address,address)": EventFragment;
    "SetVaultFactory(address,address)": EventFragment;
    "StartDraw(uint256,address,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelPottery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseDraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatePottery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Init"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemPrize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetClaimFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTreasury"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVaultFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartDraw"): EventFragment;
}

export type CancelPotteryEvent = TypedEvent<
  [string, BigNumber, string],
  { vault: string; totalPrize: BigNumber; admin: string }
>;

export type CancelPotteryEventFilter = TypedEventFilter<CancelPotteryEvent>;

export type ClaimRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { winner: string; prize: BigNumber; fee: BigNumber; winCount: BigNumber }
>;

export type ClaimRewardEventFilter = TypedEventFilter<ClaimRewardEvent>;

export type CloseDrawEvent = TypedEvent<
  [BigNumber, string, BigNumber, string[], BigNumber, string],
  {
    drawId: BigNumber;
    vault: string;
    requestId: BigNumber;
    winners: string[];
    timestamp: BigNumber;
    admin: string;
  }
>;

export type CloseDrawEventFilter = TypedEventFilter<CloseDrawEvent>;

export type CreatePotteryEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, string],
  {
    vault: string;
    totalPrize: BigNumber;
    lockTime: BigNumber;
    drawTime: BigNumber;
    maxTotalDeposit: BigNumber;
    admin: string;
  }
>;

export type CreatePotteryEventFilter = TypedEventFilter<CreatePotteryEvent>;

export type InitEvent = TypedEvent<[string], { admin: string }>;

export type InitEventFilter = TypedEventFilter<InitEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RedeemPrizeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { vault: string; actualPrize: BigNumber; redeemPrize: BigNumber }
>;

export type RedeemPrizeEventFilter = TypedEventFilter<RedeemPrizeEvent>;

export type SetClaimFeeEvent = TypedEvent<
  [string, number],
  { admin: string; fee: number }
>;

export type SetClaimFeeEventFilter = TypedEventFilter<SetClaimFeeEvent>;

export type SetKeeperEvent = TypedEvent<
  [string, string],
  { admin: string; keeper: string }
>;

export type SetKeeperEventFilter = TypedEventFilter<SetKeeperEvent>;

export type SetTreasuryEvent = TypedEvent<
  [string, string],
  { admin: string; treasury: string }
>;

export type SetTreasuryEventFilter = TypedEventFilter<SetTreasuryEvent>;

export type SetVaultFactoryEvent = TypedEvent<
  [string, string],
  { admin: string; vaultFactory: string }
>;

export type SetVaultFactoryEventFilter = TypedEventFilter<SetVaultFactoryEvent>;

export type StartDrawEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, string],
  {
    drawId: BigNumber;
    vault: string;
    requestId: BigNumber;
    totalPrize: BigNumber;
    timestamp: BigNumber;
    admin: string;
  }
>;

export type StartDrawEventFilter = TypedEventFilter<StartDrawEvent>;

export interface PotteryDrawAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PotteryDrawAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelPottery(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFee(overrides?: CallOverrides): Promise<[number]>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeDraw(
      _drawId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceRequestDraw(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    generatePottery(
      _totalPrize: BigNumberish,
      _lockTime: BigNumberish,
      _drawTime: BigNumberish,
      _maxTotalDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDraw(
      _drawId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DrawStructOutput]>;

    getNumOfDraw(overrides?: CallOverrides): Promise<[number]>;

    getNumOfWinner(overrides?: CallOverrides): Promise<[number]>;

    getPot(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[PotStructOutput]>;

    getPotteryPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTreasury(overrides?: CallOverrides): Promise<[string]>;

    getWinners(
      _drawId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    init(
      _rng: string,
      _vaultFactory: string,
      _keeper: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeemPrizeByRatio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rngFulfillRandomWords(
      _drawId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setClaimFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startDraw(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeToDraw(_vault: string, overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reward: BigNumber; winCount: BigNumber }
    >;
  };

  cancelPottery(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFee(overrides?: CallOverrides): Promise<number>;

  claimReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeDraw(
    _drawId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceRequestDraw(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  generatePottery(
    _totalPrize: BigNumberish,
    _lockTime: BigNumberish,
    _drawTime: BigNumberish,
    _maxTotalDeposit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDraw(
    _drawId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DrawStructOutput>;

  getNumOfDraw(overrides?: CallOverrides): Promise<number>;

  getNumOfWinner(overrides?: CallOverrides): Promise<number>;

  getPot(_vault: string, overrides?: CallOverrides): Promise<PotStructOutput>;

  getPotteryPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getTreasury(overrides?: CallOverrides): Promise<string>;

  getWinners(
    _drawId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  init(
    _rng: string,
    _vaultFactory: string,
    _keeper: string,
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeemPrizeByRatio(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rngFulfillRandomWords(
    _drawId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setClaimFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultFactory(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startDraw(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeToDraw(_vault: string, overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfos(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { reward: BigNumber; winCount: BigNumber }
  >;

  callStatic: {
    cancelPottery(_vault: string, overrides?: CallOverrides): Promise<void>;

    claimFee(overrides?: CallOverrides): Promise<number>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    closeDraw(_drawId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    forceRequestDraw(_vault: string, overrides?: CallOverrides): Promise<void>;

    generatePottery(
      _totalPrize: BigNumberish,
      _lockTime: BigNumberish,
      _drawTime: BigNumberish,
      _maxTotalDeposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDraw(
      _drawId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DrawStructOutput>;

    getNumOfDraw(overrides?: CallOverrides): Promise<number>;

    getNumOfWinner(overrides?: CallOverrides): Promise<number>;

    getPot(_vault: string, overrides?: CallOverrides): Promise<PotStructOutput>;

    getPotteryPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasury(overrides?: CallOverrides): Promise<string>;

    getWinners(
      _drawId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    init(
      _rng: string,
      _vaultFactory: string,
      _keeper: string,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeemPrizeByRatio(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rngFulfillRandomWords(
      _drawId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setClaimFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setKeeper(_keeper: string, overrides?: CallOverrides): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    setVaultFactory(_factory: string, overrides?: CallOverrides): Promise<void>;

    startDraw(_vault: string, overrides?: CallOverrides): Promise<void>;

    timeToDraw(_vault: string, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reward: BigNumber; winCount: BigNumber }
    >;
  };

  filters: {
    "CancelPottery(address,uint256,address)"(
      vault?: string | null,
      totalPrize?: null,
      admin?: null
    ): CancelPotteryEventFilter;
    CancelPottery(
      vault?: string | null,
      totalPrize?: null,
      admin?: null
    ): CancelPotteryEventFilter;

    "ClaimReward(address,uint256,uint256,uint256)"(
      winner?: string | null,
      prize?: null,
      fee?: null,
      winCount?: null
    ): ClaimRewardEventFilter;
    ClaimReward(
      winner?: string | null,
      prize?: null,
      fee?: null,
      winCount?: null
    ): ClaimRewardEventFilter;

    "CloseDraw(uint256,address,uint256,address[],uint256,address)"(
      drawId?: BigNumberish | null,
      vault?: string | null,
      requestId?: BigNumberish | null,
      winners?: null,
      timestamp?: null,
      admin?: null
    ): CloseDrawEventFilter;
    CloseDraw(
      drawId?: BigNumberish | null,
      vault?: string | null,
      requestId?: BigNumberish | null,
      winners?: null,
      timestamp?: null,
      admin?: null
    ): CloseDrawEventFilter;

    "CreatePottery(address,uint256,uint256,uint256,uint256,address)"(
      vault?: string | null,
      totalPrize?: null,
      lockTime?: null,
      drawTime?: null,
      maxTotalDeposit?: null,
      admin?: null
    ): CreatePotteryEventFilter;
    CreatePottery(
      vault?: string | null,
      totalPrize?: null,
      lockTime?: null,
      drawTime?: null,
      maxTotalDeposit?: null,
      admin?: null
    ): CreatePotteryEventFilter;

    "Init(address)"(admin?: null): InitEventFilter;
    Init(admin?: null): InitEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RedeemPrize(address,uint256,uint256)"(
      vault?: string | null,
      actualPrize?: null,
      redeemPrize?: null
    ): RedeemPrizeEventFilter;
    RedeemPrize(
      vault?: string | null,
      actualPrize?: null,
      redeemPrize?: null
    ): RedeemPrizeEventFilter;

    "SetClaimFee(address,uint16)"(
      admin?: null,
      fee?: null
    ): SetClaimFeeEventFilter;
    SetClaimFee(admin?: null, fee?: null): SetClaimFeeEventFilter;

    "SetKeeper(address,address)"(
      admin?: null,
      keeper?: null
    ): SetKeeperEventFilter;
    SetKeeper(admin?: null, keeper?: null): SetKeeperEventFilter;

    "SetTreasury(address,address)"(
      admin?: null,
      treasury?: null
    ): SetTreasuryEventFilter;
    SetTreasury(admin?: null, treasury?: null): SetTreasuryEventFilter;

    "SetVaultFactory(address,address)"(
      admin?: null,
      vaultFactory?: null
    ): SetVaultFactoryEventFilter;
    SetVaultFactory(
      admin?: null,
      vaultFactory?: null
    ): SetVaultFactoryEventFilter;

    "StartDraw(uint256,address,uint256,uint256,uint256,address)"(
      drawId?: BigNumberish | null,
      vault?: string | null,
      requestId?: BigNumberish | null,
      totalPrize?: null,
      timestamp?: null,
      admin?: null
    ): StartDrawEventFilter;
    StartDraw(
      drawId?: BigNumberish | null,
      vault?: string | null,
      requestId?: BigNumberish | null,
      totalPrize?: null,
      timestamp?: null,
      admin?: null
    ): StartDrawEventFilter;
  };

  estimateGas: {
    cancelPottery(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFee(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeDraw(
      _drawId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceRequestDraw(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    generatePottery(
      _totalPrize: BigNumberish,
      _lockTime: BigNumberish,
      _drawTime: BigNumberish,
      _maxTotalDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDraw(
      _drawId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumOfDraw(overrides?: CallOverrides): Promise<BigNumber>;

    getNumOfWinner(overrides?: CallOverrides): Promise<BigNumber>;

    getPot(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPotteryPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    getWinners(
      _drawId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _rng: string,
      _vaultFactory: string,
      _keeper: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeemPrizeByRatio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rngFulfillRandomWords(
      _drawId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setClaimFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startDraw(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeToDraw(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfos(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelPottery(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeDraw(
      _drawId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceRequestDraw(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    generatePottery(
      _totalPrize: BigNumberish,
      _lockTime: BigNumberish,
      _drawTime: BigNumberish,
      _maxTotalDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDraw(
      _drawId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumOfDraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumOfWinner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPot(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPotteryPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWinners(
      _drawId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _rng: string,
      _vaultFactory: string,
      _keeper: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemPrizeByRatio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rngFulfillRandomWords(
      _drawId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setClaimFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startDraw(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeToDraw(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
