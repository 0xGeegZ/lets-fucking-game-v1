/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PredictionsV1Interface extends utils.Interface {
  functions: {
    "TOTAL_RATE()": FunctionFragment;
    "adminAddress()": FunctionFragment;
    "betBear()": FunctionFragment;
    "betBull()": FunctionFragment;
    "bufferBlocks()": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "claimTreasury()": FunctionFragment;
    "claimable(uint256,address)": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "executeRound()": FunctionFragment;
    "genesisLockOnce()": FunctionFragment;
    "genesisLockRound()": FunctionFragment;
    "genesisStartOnce()": FunctionFragment;
    "genesisStartRound()": FunctionFragment;
    "getUserRounds(address,uint256,uint256)": FunctionFragment;
    "intervalBlocks()": FunctionFragment;
    "ledger(uint256,address)": FunctionFragment;
    "minBetAmount()": FunctionFragment;
    "operatorAddress()": FunctionFragment;
    "oracleLatestRoundId()": FunctionFragment;
    "oracleUpdateAllowance()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "refundable(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setBufferBlocks(uint256)": FunctionFragment;
    "setIntervalBlocks(uint256)": FunctionFragment;
    "setMinBetAmount(uint256)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setOracleUpdateAllowance(uint256)": FunctionFragment;
    "setRewardRate(uint256)": FunctionFragment;
    "setTreasuryRate(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAmount()": FunctionFragment;
    "treasuryRate()": FunctionFragment;
    "unpause()": FunctionFragment;
    "userRounds(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TOTAL_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "betBear", values?: undefined): string;
  encodeFunctionData(functionFragment: "betBull", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bufferBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genesisLockOnce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genesisLockRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genesisStartOnce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genesisStartRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRounds",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "intervalBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ledger",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minBetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleLatestRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleUpdateAllowance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundable",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBufferBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIntervalBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBetAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOracleUpdateAllowance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userRounds",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "TOTAL_RATE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "betBear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betBull", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bufferBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisLockOnce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisLockRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisStartOnce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisStartRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "intervalBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleLatestRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleUpdateAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBufferBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIntervalBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOracleUpdateAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userRounds", data: BytesLike): Result;

  events: {
    "BetBear(address,uint256,uint256)": EventFragment;
    "BetBull(address,uint256,uint256)": EventFragment;
    "Claim(address,uint256,uint256)": EventFragment;
    "ClaimTreasury(uint256)": EventFragment;
    "EndRound(uint256,uint256,int256)": EventFragment;
    "LockRound(uint256,uint256,int256)": EventFragment;
    "MinBetAmountUpdated(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pause(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RatesUpdated(uint256,uint256,uint256)": EventFragment;
    "RewardsCalculated(uint256,uint256,uint256,uint256)": EventFragment;
    "StartRound(uint256,uint256)": EventFragment;
    "Unpause(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BetBear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BetBull"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimTreasury"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinBetAmountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RatesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsCalculated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type BetBearEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; currentEpoch: BigNumber; amount: BigNumber }
>;

export type BetBearEventFilter = TypedEventFilter<BetBearEvent>;

export type BetBullEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; currentEpoch: BigNumber; amount: BigNumber }
>;

export type BetBullEventFilter = TypedEventFilter<BetBullEvent>;

export type ClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; currentEpoch: BigNumber; amount: BigNumber }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type ClaimTreasuryEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type ClaimTreasuryEventFilter = TypedEventFilter<ClaimTreasuryEvent>;

export type EndRoundEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { epoch: BigNumber; blockNumber: BigNumber; price: BigNumber }
>;

export type EndRoundEventFilter = TypedEventFilter<EndRoundEvent>;

export type LockRoundEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { epoch: BigNumber; blockNumber: BigNumber; price: BigNumber }
>;

export type LockRoundEventFilter = TypedEventFilter<LockRoundEvent>;

export type MinBetAmountUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { epoch: BigNumber; minBetAmount: BigNumber }
>;

export type MinBetAmountUpdatedEventFilter =
  TypedEventFilter<MinBetAmountUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PauseEvent = TypedEvent<[BigNumber], { epoch: BigNumber }>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RatesUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { epoch: BigNumber; rewardRate: BigNumber; treasuryRate: BigNumber }
>;

export type RatesUpdatedEventFilter = TypedEventFilter<RatesUpdatedEvent>;

export type RewardsCalculatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    epoch: BigNumber;
    rewardBaseCalAmount: BigNumber;
    rewardAmount: BigNumber;
    treasuryAmount: BigNumber;
  }
>;

export type RewardsCalculatedEventFilter =
  TypedEventFilter<RewardsCalculatedEvent>;

export type StartRoundEvent = TypedEvent<
  [BigNumber, BigNumber],
  { epoch: BigNumber; blockNumber: BigNumber }
>;

export type StartRoundEventFilter = TypedEventFilter<StartRoundEvent>;

export type UnpauseEvent = TypedEvent<[BigNumber], { epoch: BigNumber }>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface PredictionsV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PredictionsV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TOTAL_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    betBear(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    betBull(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bufferBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    genesisLockOnce(overrides?: CallOverrides): Promise<[boolean]>;

    genesisLockRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    genesisStartOnce(overrides?: CallOverrides): Promise<[boolean]>;

    genesisStartRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber]>;

    intervalBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    minBetAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    operatorAddress(overrides?: CallOverrides): Promise<[string]>;

    oracleLatestRoundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleUpdateAllowance(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        epoch: BigNumber;
        startBlock: BigNumber;
        lockBlock: BigNumber;
        endBlock: BigNumber;
        lockPrice: BigNumber;
        closePrice: BigNumber;
        totalAmount: BigNumber;
        bullAmount: BigNumber;
        bearAmount: BigNumber;
        rewardBaseCalAmount: BigNumber;
        rewardAmount: BigNumber;
        oracleCalled: boolean;
      }
    >;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBufferBlocks(
      _bufferBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIntervalBlocks(
      _intervalBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinBetAmount(
      _minBetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleUpdateAllowance(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardRate(
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryRate(
      _treasuryRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasuryRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  TOTAL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  adminAddress(overrides?: CallOverrides): Promise<string>;

  betBear(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  betBull(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bufferBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    epoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTreasury(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  executeRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  genesisLockOnce(overrides?: CallOverrides): Promise<boolean>;

  genesisLockRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  genesisStartOnce(overrides?: CallOverrides): Promise<boolean>;

  genesisStartRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserRounds(
    user: string,
    cursor: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber]>;

  intervalBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  ledger(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, boolean] & {
      position: number;
      amount: BigNumber;
      claimed: boolean;
    }
  >;

  minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

  operatorAddress(overrides?: CallOverrides): Promise<string>;

  oracleLatestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

  oracleUpdateAllowance(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  refundable(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      epoch: BigNumber;
      startBlock: BigNumber;
      lockBlock: BigNumber;
      endBlock: BigNumber;
      lockPrice: BigNumber;
      closePrice: BigNumber;
      totalAmount: BigNumber;
      bullAmount: BigNumber;
      bearAmount: BigNumber;
      rewardBaseCalAmount: BigNumber;
      rewardAmount: BigNumber;
      oracleCalled: boolean;
    }
  >;

  setAdmin(
    _adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBufferBlocks(
    _bufferBlocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIntervalBlocks(
    _intervalBlocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinBetAmount(
    _minBetAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleUpdateAllowance(
    _oracleUpdateAllowance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardRate(
    _rewardRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryRate(
    _treasuryRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

  treasuryRate(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userRounds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    TOTAL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<string>;

    betBear(overrides?: CallOverrides): Promise<void>;

    betBull(overrides?: CallOverrides): Promise<void>;

    bufferBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    claim(epoch: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimTreasury(overrides?: CallOverrides): Promise<void>;

    claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    executeRound(overrides?: CallOverrides): Promise<void>;

    genesisLockOnce(overrides?: CallOverrides): Promise<boolean>;

    genesisLockRound(overrides?: CallOverrides): Promise<void>;

    genesisStartOnce(overrides?: CallOverrides): Promise<boolean>;

    genesisStartRound(overrides?: CallOverrides): Promise<void>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber]>;

    intervalBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<string>;

    oracleLatestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    oracleUpdateAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        epoch: BigNumber;
        startBlock: BigNumber;
        lockBlock: BigNumber;
        endBlock: BigNumber;
        lockPrice: BigNumber;
        closePrice: BigNumber;
        totalAmount: BigNumber;
        bullAmount: BigNumber;
        bearAmount: BigNumber;
        rewardBaseCalAmount: BigNumber;
        rewardAmount: BigNumber;
        oracleCalled: boolean;
      }
    >;

    setAdmin(_adminAddress: string, overrides?: CallOverrides): Promise<void>;

    setBufferBlocks(
      _bufferBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIntervalBlocks(
      _intervalBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBetAmount(
      _minBetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(_oracle: string, overrides?: CallOverrides): Promise<void>;

    setOracleUpdateAllowance(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardRate(
      _rewardRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryRate(
      _treasuryRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryRate(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BetBear(address,uint256,uint256)"(
      sender?: string | null,
      currentEpoch?: BigNumberish | null,
      amount?: null
    ): BetBearEventFilter;
    BetBear(
      sender?: string | null,
      currentEpoch?: BigNumberish | null,
      amount?: null
    ): BetBearEventFilter;

    "BetBull(address,uint256,uint256)"(
      sender?: string | null,
      currentEpoch?: BigNumberish | null,
      amount?: null
    ): BetBullEventFilter;
    BetBull(
      sender?: string | null,
      currentEpoch?: BigNumberish | null,
      amount?: null
    ): BetBullEventFilter;

    "Claim(address,uint256,uint256)"(
      sender?: string | null,
      currentEpoch?: BigNumberish | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(
      sender?: string | null,
      currentEpoch?: BigNumberish | null,
      amount?: null
    ): ClaimEventFilter;

    "ClaimTreasury(uint256)"(amount?: null): ClaimTreasuryEventFilter;
    ClaimTreasury(amount?: null): ClaimTreasuryEventFilter;

    "EndRound(uint256,uint256,int256)"(
      epoch?: BigNumberish | null,
      blockNumber?: null,
      price?: null
    ): EndRoundEventFilter;
    EndRound(
      epoch?: BigNumberish | null,
      blockNumber?: null,
      price?: null
    ): EndRoundEventFilter;

    "LockRound(uint256,uint256,int256)"(
      epoch?: BigNumberish | null,
      blockNumber?: null,
      price?: null
    ): LockRoundEventFilter;
    LockRound(
      epoch?: BigNumberish | null,
      blockNumber?: null,
      price?: null
    ): LockRoundEventFilter;

    "MinBetAmountUpdated(uint256,uint256)"(
      epoch?: BigNumberish | null,
      minBetAmount?: null
    ): MinBetAmountUpdatedEventFilter;
    MinBetAmountUpdated(
      epoch?: BigNumberish | null,
      minBetAmount?: null
    ): MinBetAmountUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Pause(uint256)"(epoch?: null): PauseEventFilter;
    Pause(epoch?: null): PauseEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RatesUpdated(uint256,uint256,uint256)"(
      epoch?: BigNumberish | null,
      rewardRate?: null,
      treasuryRate?: null
    ): RatesUpdatedEventFilter;
    RatesUpdated(
      epoch?: BigNumberish | null,
      rewardRate?: null,
      treasuryRate?: null
    ): RatesUpdatedEventFilter;

    "RewardsCalculated(uint256,uint256,uint256,uint256)"(
      epoch?: BigNumberish | null,
      rewardBaseCalAmount?: null,
      rewardAmount?: null,
      treasuryAmount?: null
    ): RewardsCalculatedEventFilter;
    RewardsCalculated(
      epoch?: BigNumberish | null,
      rewardBaseCalAmount?: null,
      rewardAmount?: null,
      treasuryAmount?: null
    ): RewardsCalculatedEventFilter;

    "StartRound(uint256,uint256)"(
      epoch?: BigNumberish | null,
      blockNumber?: null
    ): StartRoundEventFilter;
    StartRound(
      epoch?: BigNumberish | null,
      blockNumber?: null
    ): StartRoundEventFilter;

    "Unpause(uint256)"(epoch?: null): UnpauseEventFilter;
    Unpause(epoch?: null): UnpauseEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    TOTAL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    betBear(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    betBull(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bufferBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    executeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    genesisLockOnce(overrides?: CallOverrides): Promise<BigNumber>;

    genesisLockRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    genesisStartOnce(overrides?: CallOverrides): Promise<BigNumber>;

    genesisStartRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    intervalBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    oracleLatestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    oracleUpdateAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBufferBlocks(
      _bufferBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIntervalBlocks(
      _intervalBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinBetAmount(
      _minBetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleUpdateAllowance(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardRate(
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryRate(
      _treasuryRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryRate(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TOTAL_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    betBear(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    betBull(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bufferBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    genesisLockOnce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genesisLockRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    genesisStartOnce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genesisStartRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    intervalBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBetAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleLatestRoundId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleUpdateAllowance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBufferBlocks(
      _bufferBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIntervalBlocks(
      _intervalBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinBetAmount(
      _minBetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleUpdateAllowance(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardRate(
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryRate(
      _treasuryRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
