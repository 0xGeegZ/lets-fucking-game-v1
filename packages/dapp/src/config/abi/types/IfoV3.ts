/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type VestingScheduleStruct = {
  isVestingInitialized: boolean;
  beneficiary: string;
  pid: BigNumberish;
  amountTotal: BigNumberish;
  released: BigNumberish;
};

export type VestingScheduleStructOutput = [
  boolean,
  string,
  number,
  BigNumber,
  BigNumber
] & {
  isVestingInitialized: boolean;
  beneficiary: string;
  pid: number;
  amountTotal: BigNumber;
  released: BigNumber;
};

export interface IfoV3Interface extends utils.Interface {
  functions: {
    "IFO_FACTORY()": FunctionFragment;
    "MAX_BUFFER_BLOCKS()": FunctionFragment;
    "NUMBER_POOLS()": FunctionFragment;
    "addAddressToWhitelist(address)": FunctionFragment;
    "addAddressesToWhitelist(address[])": FunctionFragment;
    "admissionProfile()": FunctionFragment;
    "campaignId()": FunctionFragment;
    "computeNextVestingScheduleIdForHolder(address)": FunctionFragment;
    "computeReleasableAmount(bytes32)": FunctionFragment;
    "computeVestingScheduleIdForAddressAndIndex(address,uint256)": FunctionFragment;
    "computeVestingScheduleIdForAddressAndPid(address,uint256)": FunctionFragment;
    "depositPool(uint256,uint8)": FunctionFragment;
    "endBlock()": FunctionFragment;
    "finalWithdraw(uint256,uint256)": FunctionFragment;
    "getVestingSchedule(bytes32)": FunctionFragment;
    "getVestingScheduleByAddressAndIndex(address,uint256)": FunctionFragment;
    "getVestingScheduleIdAtIndex(uint256)": FunctionFragment;
    "getVestingSchedulesCount()": FunctionFragment;
    "getVestingSchedulesCountByBeneficiary(address)": FunctionFragment;
    "getVestingSchedulesTotalAmount()": FunctionFragment;
    "getWithdrawableOfferingTokenAmount()": FunctionFragment;
    "harvestPool(uint8)": FunctionFragment;
    "hehe()": FunctionFragment;
    "iCake()": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,uint256,address,address,uint256,address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isQualifiedNFT(address)": FunctionFragment;
    "isQualifiedPoints(address)": FunctionFragment;
    "isQualifiedWhitelist(address)": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "lpToken()": FunctionFragment;
    "numberPoints()": FunctionFragment;
    "offeringToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "pancakeProfile()": FunctionFragment;
    "pointThreshold()": FunctionFragment;
    "recoverWrongTokens(address,uint256)": FunctionFragment;
    "release(bytes32)": FunctionFragment;
    "removeAddressFromWhitelist(address)": FunctionFragment;
    "removeAddressesFromWhitelist(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revoke()": FunctionFragment;
    "setPool(uint256,uint256,uint256,bool,uint8,bool,uint256,uint256,uint256,uint256)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "thresholdPoints()": FunctionFragment;
    "tokenIdUsed(uint256)": FunctionFragment;
    "totalTokensOffered()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePointParameters(uint256,uint256,uint256)": FunctionFragment;
    "updateStartAndEndBlocks(uint256,uint256)": FunctionFragment;
    "userCreditUsed(address)": FunctionFragment;
    "vestingRevoked()": FunctionFragment;
    "vestingStartTime()": FunctionFragment;
    "viewPoolInformation(uint256)": FunctionFragment;
    "viewPoolTaxRateOverflow(uint256)": FunctionFragment;
    "viewPoolVestingInformation(uint256)": FunctionFragment;
    "viewUserAllocationPools(address,uint8[])": FunctionFragment;
    "viewUserInfo(address,uint8[])": FunctionFragment;
    "viewUserOfferingAndRefundingAmountsForPools(address,uint8[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "IFO_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BUFFER_BLOCKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NUMBER_POOLS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAddressToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addAddressesToWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "admissionProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeNextVestingScheduleIdForHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "computeReleasableAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeVestingScheduleIdForAddressAndIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeVestingScheduleIdForAddressAndPid",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalWithdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingScheduleByAddressAndIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingScheduleIdAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesCountByBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesTotalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableOfferingTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hehe", values?: undefined): string;
  encodeFunctionData(functionFragment: "iCake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isQualifiedNFT",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isQualifiedPoints",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isQualifiedWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offeringToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverWrongTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "release", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "removeAddressFromWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAddressesFromWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revoke", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPool",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "thresholdPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdUsed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokensOffered",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePointParameters",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStartAndEndBlocks",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userCreditUsed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingRevoked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewPoolInformation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewPoolTaxRateOverflow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewPoolVestingInformation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewUserAllocationPools",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "viewUserInfo",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "viewUserOfferingAndRefundingAmountsForPools",
    values: [string, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "IFO_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BUFFER_BLOCKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NUMBER_POOLS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAddressToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAddressesToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "admissionProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaignId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeNextVestingScheduleIdForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeReleasableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeVestingScheduleIdForAddressAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeVestingScheduleIdForAddressAndPid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingScheduleByAddressAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingScheduleIdAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesCountByBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableOfferingTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hehe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iCake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQualifiedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQualifiedPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQualifiedWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offeringToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverWrongTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAddressFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAddressesFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "thresholdPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensOffered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePointParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStartAndEndBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCreditUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPoolInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPoolTaxRateOverflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPoolVestingInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewUserAllocationPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewUserOfferingAndRefundingAmountsForPools",
    data: BytesLike
  ): Result;

  events: {
    "AdminTokenRecovery(address,uint256)": EventFragment;
    "AdminWithdraw(uint256,uint256)": EventFragment;
    "CreateVestingSchedule(address,uint256,uint256,uint8)": EventFragment;
    "Deposit(address,uint256,uint8)": EventFragment;
    "Harvest(address,uint256,uint256,uint8)": EventFragment;
    "NewStartAndEndBlocks(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PointParametersSet(uint256,uint256,uint256)": EventFragment;
    "PoolParametersSet(uint256,uint256,uint8)": EventFragment;
    "Released(address,uint256)": EventFragment;
    "Revoked()": EventFragment;
    "WhitelistedAddressAdded(address)": EventFragment;
    "WhitelistedAddressRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminTokenRecovery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateVestingSchedule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStartAndEndBlocks"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PointParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedAddressAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedAddressRemoved"): EventFragment;
}

export type AdminTokenRecoveryEvent = TypedEvent<
  [string, BigNumber],
  { tokenAddress: string; amountTokens: BigNumber }
>;

export type AdminTokenRecoveryEventFilter =
  TypedEventFilter<AdminTokenRecoveryEvent>;

export type AdminWithdrawEvent = TypedEvent<
  [BigNumber, BigNumber],
  { amountLP: BigNumber; amountOfferingToken: BigNumber }
>;

export type AdminWithdrawEventFilter = TypedEventFilter<AdminWithdrawEvent>;

export type CreateVestingScheduleEvent = TypedEvent<
  [string, BigNumber, BigNumber, number],
  {
    user: string;
    offeringAmount: BigNumber;
    excessAmount: BigNumber;
    pid: number;
  }
>;

export type CreateVestingScheduleEventFilter =
  TypedEventFilter<CreateVestingScheduleEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, number],
  { user: string; amount: BigNumber; pid: number }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type HarvestEvent = TypedEvent<
  [string, BigNumber, BigNumber, number],
  {
    user: string;
    offeringAmount: BigNumber;
    excessAmount: BigNumber;
    pid: number;
  }
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export type NewStartAndEndBlocksEvent = TypedEvent<
  [BigNumber, BigNumber],
  { startBlock: BigNumber; endBlock: BigNumber }
>;

export type NewStartAndEndBlocksEventFilter =
  TypedEventFilter<NewStartAndEndBlocksEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PointParametersSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { campaignId: BigNumber; numberPoints: BigNumber; thresholdPoints: BigNumber }
>;

export type PointParametersSetEventFilter =
  TypedEventFilter<PointParametersSetEvent>;

export type PoolParametersSetEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  { offeringAmountPool: BigNumber; raisingAmountPool: BigNumber; pid: number }
>;

export type PoolParametersSetEventFilter =
  TypedEventFilter<PoolParametersSetEvent>;

export type ReleasedEvent = TypedEvent<
  [string, BigNumber],
  { beneficiary: string; amount: BigNumber }
>;

export type ReleasedEventFilter = TypedEventFilter<ReleasedEvent>;

export type RevokedEvent = TypedEvent<[], {}>;

export type RevokedEventFilter = TypedEventFilter<RevokedEvent>;

export type WhitelistedAddressAddedEvent = TypedEvent<
  [string],
  { _user: string }
>;

export type WhitelistedAddressAddedEventFilter =
  TypedEventFilter<WhitelistedAddressAddedEvent>;

export type WhitelistedAddressRemovedEvent = TypedEvent<
  [string],
  { _user: string }
>;

export type WhitelistedAddressRemovedEventFilter =
  TypedEventFilter<WhitelistedAddressRemovedEvent>;

export interface IfoV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IfoV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IFO_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    MAX_BUFFER_BLOCKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    NUMBER_POOLS(overrides?: CallOverrides): Promise<[number]>;

    addAddressToWhitelist(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAddressesToWhitelist(
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admissionProfile(overrides?: CallOverrides): Promise<[string]>;

    campaignId(overrides?: CallOverrides): Promise<[BigNumber]>;

    computeNextVestingScheduleIdForHolder(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    computeReleasableAmount(
      _vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeVestingScheduleIdForAddressAndIndex(
      _holder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    computeVestingScheduleIdForAddressAndPid(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    depositPool(
      _amount: BigNumberish,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalWithdraw(
      _lpAmount: BigNumberish,
      _offerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getVestingSchedule(
      _vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[VestingScheduleStructOutput]>;

    getVestingScheduleByAddressAndIndex(
      _holder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[VestingScheduleStructOutput]>;

    getVestingScheduleIdAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVestingSchedulesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVestingSchedulesCountByBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVestingSchedulesTotalAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWithdrawableOfferingTokenAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    harvestPool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hehe(overrides?: CallOverrides): Promise<[BigNumber]>;

    iCake(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _lpToken: string,
      _offeringToken: string,
      _pancakeProfileAddress: string,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      _maxBufferBlocks: BigNumberish,
      _adminAddress: string,
      _iCakeAddress: string,
      _pointThreshold: BigNumberish,
      _admissionProfile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isQualifiedNFT(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isQualifiedPoints(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isQualifiedWhitelist(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelisted(_user: string, overrides?: CallOverrides): Promise<[boolean]>;

    lpToken(overrides?: CallOverrides): Promise<[string]>;

    numberPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    offeringToken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pancakeProfile(overrides?: CallOverrides): Promise<[string]>;

    pointThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverWrongTokens(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    release(
      _vestingScheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAddressFromWhitelist(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAddressesFromWhitelist(
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revoke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPool(
      _offeringAmountPool: BigNumberish,
      _raisingAmountPool: BigNumberish,
      _limitPerUserInLP: BigNumberish,
      _hasTax: boolean,
      _pid: BigNumberish,
      _isSpecialSale: boolean,
      _vestingPercentage: BigNumberish,
      _vestingCliff: BigNumberish,
      _vestingDuration: BigNumberish,
      _vestingSlicePeriodSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    thresholdPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenIdUsed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalTokensOffered(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePointParameters(
      _campaignId: BigNumberish,
      _numberPoints: BigNumberish,
      _thresholdPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStartAndEndBlocks(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userCreditUsed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vestingRevoked(overrides?: CallOverrides): Promise<[boolean]>;

    vestingStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    viewPoolInformation(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, BigNumber, BigNumber, boolean]
    >;

    viewPoolTaxRateOverflow(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewPoolVestingInformation(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    viewUserAllocationPools(
      _user: string,
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    viewUserInfo(
      _user: string,
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], boolean[]]>;

    viewUserOfferingAndRefundingAmountsForPools(
      _user: string,
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber][]]>;
  };

  IFO_FACTORY(overrides?: CallOverrides): Promise<string>;

  MAX_BUFFER_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

  NUMBER_POOLS(overrides?: CallOverrides): Promise<number>;

  addAddressToWhitelist(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAddressesToWhitelist(
    _users: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admissionProfile(overrides?: CallOverrides): Promise<string>;

  campaignId(overrides?: CallOverrides): Promise<BigNumber>;

  computeNextVestingScheduleIdForHolder(
    _holder: string,
    overrides?: CallOverrides
  ): Promise<string>;

  computeReleasableAmount(
    _vestingScheduleId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeVestingScheduleIdForAddressAndIndex(
    _holder: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  computeVestingScheduleIdForAddressAndPid(
    _holder: string,
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  depositPool(
    _amount: BigNumberish,
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  finalWithdraw(
    _lpAmount: BigNumberish,
    _offerAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getVestingSchedule(
    _vestingScheduleId: BytesLike,
    overrides?: CallOverrides
  ): Promise<VestingScheduleStructOutput>;

  getVestingScheduleByAddressAndIndex(
    _holder: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<VestingScheduleStructOutput>;

  getVestingScheduleIdAtIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVestingSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

  getVestingSchedulesCountByBeneficiary(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVestingSchedulesTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getWithdrawableOfferingTokenAmount(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvestPool(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hehe(overrides?: CallOverrides): Promise<BigNumber>;

  iCake(overrides?: CallOverrides): Promise<string>;

  initialize(
    _lpToken: string,
    _offeringToken: string,
    _pancakeProfileAddress: string,
    _startBlock: BigNumberish,
    _endBlock: BigNumberish,
    _maxBufferBlocks: BigNumberish,
    _adminAddress: string,
    _iCakeAddress: string,
    _pointThreshold: BigNumberish,
    _admissionProfile: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isQualifiedNFT(_user: string, overrides?: CallOverrides): Promise<boolean>;

  isQualifiedPoints(_user: string, overrides?: CallOverrides): Promise<boolean>;

  isQualifiedWhitelist(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelisted(_user: string, overrides?: CallOverrides): Promise<boolean>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  numberPoints(overrides?: CallOverrides): Promise<BigNumber>;

  offeringToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pancakeProfile(overrides?: CallOverrides): Promise<string>;

  pointThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  recoverWrongTokens(
    _tokenAddress: string,
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  release(
    _vestingScheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAddressFromWhitelist(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAddressesFromWhitelist(
    _users: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revoke(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPool(
    _offeringAmountPool: BigNumberish,
    _raisingAmountPool: BigNumberish,
    _limitPerUserInLP: BigNumberish,
    _hasTax: boolean,
    _pid: BigNumberish,
    _isSpecialSale: boolean,
    _vestingPercentage: BigNumberish,
    _vestingCliff: BigNumberish,
    _vestingDuration: BigNumberish,
    _vestingSlicePeriodSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  thresholdPoints(overrides?: CallOverrides): Promise<BigNumber>;

  tokenIdUsed(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalTokensOffered(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePointParameters(
    _campaignId: BigNumberish,
    _numberPoints: BigNumberish,
    _thresholdPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStartAndEndBlocks(
    _startBlock: BigNumberish,
    _endBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userCreditUsed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  vestingRevoked(overrides?: CallOverrides): Promise<boolean>;

  vestingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  viewPoolInformation(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean, BigNumber, BigNumber, boolean]
  >;

  viewPoolTaxRateOverflow(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewPoolVestingInformation(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  viewUserAllocationPools(
    _user: string,
    _pids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  viewUserInfo(
    _user: string,
    _pids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], boolean[]]>;

  viewUserOfferingAndRefundingAmountsForPools(
    _user: string,
    _pids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber][]>;

  callStatic: {
    IFO_FACTORY(overrides?: CallOverrides): Promise<string>;

    MAX_BUFFER_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

    NUMBER_POOLS(overrides?: CallOverrides): Promise<number>;

    addAddressToWhitelist(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addAddressesToWhitelist(
      _users: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    admissionProfile(overrides?: CallOverrides): Promise<string>;

    campaignId(overrides?: CallOverrides): Promise<BigNumber>;

    computeNextVestingScheduleIdForHolder(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<string>;

    computeReleasableAmount(
      _vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeVestingScheduleIdForAddressAndIndex(
      _holder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    computeVestingScheduleIdForAddressAndPid(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    depositPool(
      _amount: BigNumberish,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    finalWithdraw(
      _lpAmount: BigNumberish,
      _offerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getVestingSchedule(
      _vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<VestingScheduleStructOutput>;

    getVestingScheduleByAddressAndIndex(
      _holder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<VestingScheduleStructOutput>;

    getVestingScheduleIdAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVestingSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getVestingSchedulesCountByBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingSchedulesTotalAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableOfferingTokenAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestPool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    hehe(overrides?: CallOverrides): Promise<BigNumber>;

    iCake(overrides?: CallOverrides): Promise<string>;

    initialize(
      _lpToken: string,
      _offeringToken: string,
      _pancakeProfileAddress: string,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      _maxBufferBlocks: BigNumberish,
      _adminAddress: string,
      _iCakeAddress: string,
      _pointThreshold: BigNumberish,
      _admissionProfile: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isQualifiedNFT(_user: string, overrides?: CallOverrides): Promise<boolean>;

    isQualifiedPoints(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isQualifiedWhitelist(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelisted(_user: string, overrides?: CallOverrides): Promise<boolean>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    numberPoints(overrides?: CallOverrides): Promise<BigNumber>;

    offeringToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pancakeProfile(overrides?: CallOverrides): Promise<string>;

    pointThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    recoverWrongTokens(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    release(
      _vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAddressFromWhitelist(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAddressesFromWhitelist(
      _users: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revoke(overrides?: CallOverrides): Promise<void>;

    setPool(
      _offeringAmountPool: BigNumberish,
      _raisingAmountPool: BigNumberish,
      _limitPerUserInLP: BigNumberish,
      _hasTax: boolean,
      _pid: BigNumberish,
      _isSpecialSale: boolean,
      _vestingPercentage: BigNumberish,
      _vestingCliff: BigNumberish,
      _vestingDuration: BigNumberish,
      _vestingSlicePeriodSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    thresholdPoints(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdUsed(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalTokensOffered(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePointParameters(
      _campaignId: BigNumberish,
      _numberPoints: BigNumberish,
      _thresholdPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStartAndEndBlocks(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userCreditUsed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vestingRevoked(overrides?: CallOverrides): Promise<boolean>;

    vestingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    viewPoolInformation(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, BigNumber, BigNumber, boolean]
    >;

    viewPoolTaxRateOverflow(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewPoolVestingInformation(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    viewUserAllocationPools(
      _user: string,
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    viewUserInfo(
      _user: string,
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], boolean[]]>;

    viewUserOfferingAndRefundingAmountsForPools(
      _user: string,
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber][]>;
  };

  filters: {
    "AdminTokenRecovery(address,uint256)"(
      tokenAddress?: null,
      amountTokens?: null
    ): AdminTokenRecoveryEventFilter;
    AdminTokenRecovery(
      tokenAddress?: null,
      amountTokens?: null
    ): AdminTokenRecoveryEventFilter;

    "AdminWithdraw(uint256,uint256)"(
      amountLP?: null,
      amountOfferingToken?: null
    ): AdminWithdrawEventFilter;
    AdminWithdraw(
      amountLP?: null,
      amountOfferingToken?: null
    ): AdminWithdrawEventFilter;

    "CreateVestingSchedule(address,uint256,uint256,uint8)"(
      user?: string | null,
      offeringAmount?: null,
      excessAmount?: null,
      pid?: BigNumberish | null
    ): CreateVestingScheduleEventFilter;
    CreateVestingSchedule(
      user?: string | null,
      offeringAmount?: null,
      excessAmount?: null,
      pid?: BigNumberish | null
    ): CreateVestingScheduleEventFilter;

    "Deposit(address,uint256,uint8)"(
      user?: string | null,
      amount?: null,
      pid?: BigNumberish | null
    ): DepositEventFilter;
    Deposit(
      user?: string | null,
      amount?: null,
      pid?: BigNumberish | null
    ): DepositEventFilter;

    "Harvest(address,uint256,uint256,uint8)"(
      user?: string | null,
      offeringAmount?: null,
      excessAmount?: null,
      pid?: BigNumberish | null
    ): HarvestEventFilter;
    Harvest(
      user?: string | null,
      offeringAmount?: null,
      excessAmount?: null,
      pid?: BigNumberish | null
    ): HarvestEventFilter;

    "NewStartAndEndBlocks(uint256,uint256)"(
      startBlock?: null,
      endBlock?: null
    ): NewStartAndEndBlocksEventFilter;
    NewStartAndEndBlocks(
      startBlock?: null,
      endBlock?: null
    ): NewStartAndEndBlocksEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PointParametersSet(uint256,uint256,uint256)"(
      campaignId?: null,
      numberPoints?: null,
      thresholdPoints?: null
    ): PointParametersSetEventFilter;
    PointParametersSet(
      campaignId?: null,
      numberPoints?: null,
      thresholdPoints?: null
    ): PointParametersSetEventFilter;

    "PoolParametersSet(uint256,uint256,uint8)"(
      offeringAmountPool?: null,
      raisingAmountPool?: null,
      pid?: null
    ): PoolParametersSetEventFilter;
    PoolParametersSet(
      offeringAmountPool?: null,
      raisingAmountPool?: null,
      pid?: null
    ): PoolParametersSetEventFilter;

    "Released(address,uint256)"(
      beneficiary?: string | null,
      amount?: null
    ): ReleasedEventFilter;
    Released(beneficiary?: string | null, amount?: null): ReleasedEventFilter;

    "Revoked()"(): RevokedEventFilter;
    Revoked(): RevokedEventFilter;

    "WhitelistedAddressAdded(address)"(
      _user?: string | null
    ): WhitelistedAddressAddedEventFilter;
    WhitelistedAddressAdded(
      _user?: string | null
    ): WhitelistedAddressAddedEventFilter;

    "WhitelistedAddressRemoved(address)"(
      _user?: string | null
    ): WhitelistedAddressRemovedEventFilter;
    WhitelistedAddressRemoved(
      _user?: string | null
    ): WhitelistedAddressRemovedEventFilter;
  };

  estimateGas: {
    IFO_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BUFFER_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

    NUMBER_POOLS(overrides?: CallOverrides): Promise<BigNumber>;

    addAddressToWhitelist(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAddressesToWhitelist(
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admissionProfile(overrides?: CallOverrides): Promise<BigNumber>;

    campaignId(overrides?: CallOverrides): Promise<BigNumber>;

    computeNextVestingScheduleIdForHolder(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeReleasableAmount(
      _vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeVestingScheduleIdForAddressAndIndex(
      _holder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeVestingScheduleIdForAddressAndPid(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositPool(
      _amount: BigNumberish,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    finalWithdraw(
      _lpAmount: BigNumberish,
      _offerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getVestingSchedule(
      _vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingScheduleByAddressAndIndex(
      _holder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingScheduleIdAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getVestingSchedulesCountByBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingSchedulesTotalAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableOfferingTokenAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestPool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hehe(overrides?: CallOverrides): Promise<BigNumber>;

    iCake(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _lpToken: string,
      _offeringToken: string,
      _pancakeProfileAddress: string,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      _maxBufferBlocks: BigNumberish,
      _adminAddress: string,
      _iCakeAddress: string,
      _pointThreshold: BigNumberish,
      _admissionProfile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isQualifiedNFT(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isQualifiedPoints(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isQualifiedWhitelist(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelisted(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    numberPoints(overrides?: CallOverrides): Promise<BigNumber>;

    offeringToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeProfile(overrides?: CallOverrides): Promise<BigNumber>;

    pointThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    recoverWrongTokens(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    release(
      _vestingScheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAddressFromWhitelist(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAddressesFromWhitelist(
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revoke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPool(
      _offeringAmountPool: BigNumberish,
      _raisingAmountPool: BigNumberish,
      _limitPerUserInLP: BigNumberish,
      _hasTax: boolean,
      _pid: BigNumberish,
      _isSpecialSale: boolean,
      _vestingPercentage: BigNumberish,
      _vestingCliff: BigNumberish,
      _vestingDuration: BigNumberish,
      _vestingSlicePeriodSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    thresholdPoints(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdUsed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTokensOffered(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePointParameters(
      _campaignId: BigNumberish,
      _numberPoints: BigNumberish,
      _thresholdPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStartAndEndBlocks(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userCreditUsed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vestingRevoked(overrides?: CallOverrides): Promise<BigNumber>;

    vestingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    viewPoolInformation(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewPoolTaxRateOverflow(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewPoolVestingInformation(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewUserAllocationPools(
      _user: string,
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewUserInfo(
      _user: string,
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewUserOfferingAndRefundingAmountsForPools(
      _user: string,
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IFO_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BUFFER_BLOCKS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NUMBER_POOLS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAddressToWhitelist(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAddressesToWhitelist(
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admissionProfile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaignId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeNextVestingScheduleIdForHolder(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeReleasableAmount(
      _vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeVestingScheduleIdForAddressAndIndex(
      _holder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeVestingScheduleIdForAddressAndPid(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositPool(
      _amount: BigNumberish,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalWithdraw(
      _lpAmount: BigNumberish,
      _offerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getVestingSchedule(
      _vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingScheduleByAddressAndIndex(
      _holder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingScheduleIdAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingSchedulesCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingSchedulesCountByBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingSchedulesTotalAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawableOfferingTokenAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestPool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hehe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iCake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _lpToken: string,
      _offeringToken: string,
      _pancakeProfileAddress: string,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      _maxBufferBlocks: BigNumberish,
      _adminAddress: string,
      _iCakeAddress: string,
      _pointThreshold: BigNumberish,
      _admissionProfile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isQualifiedNFT(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isQualifiedPoints(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isQualifiedWhitelist(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offeringToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeProfile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pointThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverWrongTokens(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    release(
      _vestingScheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAddressFromWhitelist(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAddressesFromWhitelist(
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPool(
      _offeringAmountPool: BigNumberish,
      _raisingAmountPool: BigNumberish,
      _limitPerUserInLP: BigNumberish,
      _hasTax: boolean,
      _pid: BigNumberish,
      _isSpecialSale: boolean,
      _vestingPercentage: BigNumberish,
      _vestingCliff: BigNumberish,
      _vestingDuration: BigNumberish,
      _vestingSlicePeriodSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    thresholdPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIdUsed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTokensOffered(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePointParameters(
      _campaignId: BigNumberish,
      _numberPoints: BigNumberish,
      _thresholdPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStartAndEndBlocks(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userCreditUsed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestingRevoked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewPoolInformation(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewPoolTaxRateOverflow(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewPoolVestingInformation(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewUserAllocationPools(
      _user: string,
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewUserInfo(
      _user: string,
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewUserOfferingAndRefundingAmountsForPools(
      _user: string,
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
