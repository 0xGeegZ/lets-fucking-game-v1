/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PancakeProfileInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "NFT_ROLE()": FunctionFragment;
    "POINT_ROLE()": FunctionFragment;
    "SPECIAL_ROLE()": FunctionFragment;
    "addNftAddress(address)": FunctionFragment;
    "addTeam(string,string)": FunctionFragment;
    "cakeToken()": FunctionFragment;
    "changeTeam(address,uint256)": FunctionFragment;
    "claimFee(uint256)": FunctionFragment;
    "createProfile(uint256,address,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getTeamProfile(uint256)": FunctionFragment;
    "getUserProfile(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRegistered(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseTeamPoints(uint256,uint256,uint256)": FunctionFragment;
    "increaseUserPoints(address,uint256,uint256)": FunctionFragment;
    "increaseUserPointsMultiple(address[],uint256,uint256)": FunctionFragment;
    "makeTeamJoinable(uint256)": FunctionFragment;
    "makeTeamNotJoinable(uint256)": FunctionFragment;
    "numberActiveProfiles()": FunctionFragment;
    "numberCakeToReactivate()": FunctionFragment;
    "numberCakeToRegister()": FunctionFragment;
    "numberCakeToUpdate()": FunctionFragment;
    "numberTeams()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "pauseProfile()": FunctionFragment;
    "reactivateProfile(address,uint256)": FunctionFragment;
    "removeTeamPoints(uint256,uint256)": FunctionFragment;
    "removeUserPoints(address,uint256)": FunctionFragment;
    "removeUserPointsMultiple(address[],uint256)": FunctionFragment;
    "renameTeam(uint256,string,string)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "updateNumberCake(uint256,uint256,uint256)": FunctionFragment;
    "updateProfile(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NFT_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "POINT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SPECIAL_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addNftAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addTeam",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "cakeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeTeam",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTeamProfile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserProfile",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTeamPoints",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseUserPoints",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseUserPointsMultiple",
    values: [string[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeTeamJoinable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeTeamNotJoinable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberActiveProfiles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberCakeToReactivate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberCakeToRegister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberCakeToUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberTeams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reactivateProfile",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTeamPoints",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUserPoints",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUserPointsMultiple",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renameTeam",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNumberCake",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfile",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NFT_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "POINT_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SPECIAL_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTeam", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cakeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeTeam", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeamProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseTeamPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseUserPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseUserPointsMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeTeamJoinable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeTeamNotJoinable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberActiveProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberCakeToReactivate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberCakeToRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberCakeToUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberTeams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reactivateProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTeamPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUserPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUserPointsMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renameTeam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateNumberCake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfile",
    data: BytesLike
  ): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TeamAdd(uint256,string)": EventFragment;
    "TeamPointIncrease(uint256,uint256,uint256)": EventFragment;
    "UserChangeTeam(address,uint256,uint256)": EventFragment;
    "UserNew(address,uint256,address,uint256)": EventFragment;
    "UserPause(address,uint256)": EventFragment;
    "UserPointIncrease(address,uint256,uint256)": EventFragment;
    "UserPointIncreaseMultiple(address[],uint256,uint256)": EventFragment;
    "UserReactivate(address,uint256,address,uint256)": EventFragment;
    "UserUpdate(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TeamAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TeamPointIncrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserChangeTeam"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserNew"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserPause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserPointIncrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserPointIncreaseMultiple"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserReactivate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserUpdate"): EventFragment;
}

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type TeamAddEvent = TypedEvent<
  [BigNumber, string],
  { teamId: BigNumber; teamName: string }
>;

export type TeamAddEventFilter = TypedEventFilter<TeamAddEvent>;

export type TeamPointIncreaseEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { teamId: BigNumber; numberPoints: BigNumber; campaignId: BigNumber }
>;

export type TeamPointIncreaseEventFilter =
  TypedEventFilter<TeamPointIncreaseEvent>;

export type UserChangeTeamEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { userAddress: string; oldTeamId: BigNumber; newTeamId: BigNumber }
>;

export type UserChangeTeamEventFilter = TypedEventFilter<UserChangeTeamEvent>;

export type UserNewEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  {
    userAddress: string;
    teamId: BigNumber;
    nftAddress: string;
    tokenId: BigNumber;
  }
>;

export type UserNewEventFilter = TypedEventFilter<UserNewEvent>;

export type UserPauseEvent = TypedEvent<
  [string, BigNumber],
  { userAddress: string; teamId: BigNumber }
>;

export type UserPauseEventFilter = TypedEventFilter<UserPauseEvent>;

export type UserPointIncreaseEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { userAddress: string; numberPoints: BigNumber; campaignId: BigNumber }
>;

export type UserPointIncreaseEventFilter =
  TypedEventFilter<UserPointIncreaseEvent>;

export type UserPointIncreaseMultipleEvent = TypedEvent<
  [string[], BigNumber, BigNumber],
  { userAddresses: string[]; numberPoints: BigNumber; campaignId: BigNumber }
>;

export type UserPointIncreaseMultipleEventFilter =
  TypedEventFilter<UserPointIncreaseMultipleEvent>;

export type UserReactivateEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  {
    userAddress: string;
    teamId: BigNumber;
    nftAddress: string;
    tokenId: BigNumber;
  }
>;

export type UserReactivateEventFilter = TypedEventFilter<UserReactivateEvent>;

export type UserUpdateEvent = TypedEvent<
  [string, string, BigNumber],
  { userAddress: string; nftAddress: string; tokenId: BigNumber }
>;

export type UserUpdateEventFilter = TypedEventFilter<UserUpdateEvent>;

export interface PancakeProfile extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PancakeProfileInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    NFT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    POINT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SPECIAL_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addNftAddress(
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTeam(
      _teamName: string,
      _teamDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cakeToken(overrides?: CallOverrides): Promise<[string]>;

    changeTeam(
      _userAddress: string,
      _newTeamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFee(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createProfile(
      _teamId: BigNumberish,
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTeamProfile(
      _teamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, boolean]>;

    getUserProfile(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, string, BigNumber, boolean]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRegistered(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseTeamPoints(
      _teamId: BigNumberish,
      _numberPoints: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseUserPoints(
      _userAddress: string,
      _numberPoints: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseUserPointsMultiple(
      _userAddresses: string[],
      _numberPoints: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeTeamJoinable(
      _teamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeTeamNotJoinable(
      _teamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numberActiveProfiles(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberCakeToReactivate(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberCakeToRegister(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberCakeToUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberTeams(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseProfile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reactivateProfile(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeTeamPoints(
      _teamId: BigNumberish,
      _numberPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeUserPoints(
      _userAddress: string,
      _numberPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeUserPointsMultiple(
      _userAddresses: string[],
      _numberPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renameTeam(
      _teamId: BigNumberish,
      _teamName: string,
      _teamDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateNumberCake(
      _newNumberCakeToReactivate: BigNumberish,
      _newNumberCakeToRegister: BigNumberish,
      _newNumberCakeToUpdate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProfile(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  NFT_ROLE(overrides?: CallOverrides): Promise<string>;

  POINT_ROLE(overrides?: CallOverrides): Promise<string>;

  SPECIAL_ROLE(overrides?: CallOverrides): Promise<string>;

  addNftAddress(
    _nftAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTeam(
    _teamName: string,
    _teamDescription: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cakeToken(overrides?: CallOverrides): Promise<string>;

  changeTeam(
    _userAddress: string,
    _newTeamId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFee(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createProfile(
    _teamId: BigNumberish,
    _nftAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTeamProfile(
    _teamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber, BigNumber, boolean]>;

  getUserProfile(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, string, BigNumber, boolean]>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRegistered(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseTeamPoints(
    _teamId: BigNumberish,
    _numberPoints: BigNumberish,
    _campaignId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseUserPoints(
    _userAddress: string,
    _numberPoints: BigNumberish,
    _campaignId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseUserPointsMultiple(
    _userAddresses: string[],
    _numberPoints: BigNumberish,
    _campaignId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeTeamJoinable(
    _teamId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeTeamNotJoinable(
    _teamId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numberActiveProfiles(overrides?: CallOverrides): Promise<BigNumber>;

  numberCakeToReactivate(overrides?: CallOverrides): Promise<BigNumber>;

  numberCakeToRegister(overrides?: CallOverrides): Promise<BigNumber>;

  numberCakeToUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  numberTeams(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseProfile(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reactivateProfile(
    _nftAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeTeamPoints(
    _teamId: BigNumberish,
    _numberPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeUserPoints(
    _userAddress: string,
    _numberPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeUserPointsMultiple(
    _userAddresses: string[],
    _numberPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renameTeam(
    _teamId: BigNumberish,
    _teamName: string,
    _teamDescription: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateNumberCake(
    _newNumberCakeToReactivate: BigNumberish,
    _newNumberCakeToRegister: BigNumberish,
    _newNumberCakeToUpdate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProfile(
    _nftAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    NFT_ROLE(overrides?: CallOverrides): Promise<string>;

    POINT_ROLE(overrides?: CallOverrides): Promise<string>;

    SPECIAL_ROLE(overrides?: CallOverrides): Promise<string>;

    addNftAddress(
      _nftAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addTeam(
      _teamName: string,
      _teamDescription: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cakeToken(overrides?: CallOverrides): Promise<string>;

    changeTeam(
      _userAddress: string,
      _newTeamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFee(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    createProfile(
      _teamId: BigNumberish,
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTeamProfile(
      _teamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, boolean]>;

    getUserProfile(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, string, BigNumber, boolean]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRegistered(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseTeamPoints(
      _teamId: BigNumberish,
      _numberPoints: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseUserPoints(
      _userAddress: string,
      _numberPoints: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseUserPointsMultiple(
      _userAddresses: string[],
      _numberPoints: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeTeamJoinable(
      _teamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeTeamNotJoinable(
      _teamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    numberActiveProfiles(overrides?: CallOverrides): Promise<BigNumber>;

    numberCakeToReactivate(overrides?: CallOverrides): Promise<BigNumber>;

    numberCakeToRegister(overrides?: CallOverrides): Promise<BigNumber>;

    numberCakeToUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    numberTeams(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    pauseProfile(overrides?: CallOverrides): Promise<void>;

    reactivateProfile(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTeamPoints(
      _teamId: BigNumberish,
      _numberPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeUserPoints(
      _userAddress: string,
      _numberPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeUserPointsMultiple(
      _userAddresses: string[],
      _numberPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renameTeam(
      _teamId: BigNumberish,
      _teamName: string,
      _teamDescription: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNumberCake(
      _newNumberCakeToReactivate: BigNumberish,
      _newNumberCakeToRegister: BigNumberish,
      _newNumberCakeToUpdate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProfile(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TeamAdd(uint256,string)"(
      teamId?: null,
      teamName?: null
    ): TeamAddEventFilter;
    TeamAdd(teamId?: null, teamName?: null): TeamAddEventFilter;

    "TeamPointIncrease(uint256,uint256,uint256)"(
      teamId?: BigNumberish | null,
      numberPoints?: null,
      campaignId?: BigNumberish | null
    ): TeamPointIncreaseEventFilter;
    TeamPointIncrease(
      teamId?: BigNumberish | null,
      numberPoints?: null,
      campaignId?: BigNumberish | null
    ): TeamPointIncreaseEventFilter;

    "UserChangeTeam(address,uint256,uint256)"(
      userAddress?: string | null,
      oldTeamId?: null,
      newTeamId?: null
    ): UserChangeTeamEventFilter;
    UserChangeTeam(
      userAddress?: string | null,
      oldTeamId?: null,
      newTeamId?: null
    ): UserChangeTeamEventFilter;

    "UserNew(address,uint256,address,uint256)"(
      userAddress?: string | null,
      teamId?: null,
      nftAddress?: null,
      tokenId?: null
    ): UserNewEventFilter;
    UserNew(
      userAddress?: string | null,
      teamId?: null,
      nftAddress?: null,
      tokenId?: null
    ): UserNewEventFilter;

    "UserPause(address,uint256)"(
      userAddress?: string | null,
      teamId?: null
    ): UserPauseEventFilter;
    UserPause(userAddress?: string | null, teamId?: null): UserPauseEventFilter;

    "UserPointIncrease(address,uint256,uint256)"(
      userAddress?: string | null,
      numberPoints?: null,
      campaignId?: BigNumberish | null
    ): UserPointIncreaseEventFilter;
    UserPointIncrease(
      userAddress?: string | null,
      numberPoints?: null,
      campaignId?: BigNumberish | null
    ): UserPointIncreaseEventFilter;

    "UserPointIncreaseMultiple(address[],uint256,uint256)"(
      userAddresses?: null,
      numberPoints?: null,
      campaignId?: BigNumberish | null
    ): UserPointIncreaseMultipleEventFilter;
    UserPointIncreaseMultiple(
      userAddresses?: null,
      numberPoints?: null,
      campaignId?: BigNumberish | null
    ): UserPointIncreaseMultipleEventFilter;

    "UserReactivate(address,uint256,address,uint256)"(
      userAddress?: string | null,
      teamId?: null,
      nftAddress?: null,
      tokenId?: null
    ): UserReactivateEventFilter;
    UserReactivate(
      userAddress?: string | null,
      teamId?: null,
      nftAddress?: null,
      tokenId?: null
    ): UserReactivateEventFilter;

    "UserUpdate(address,address,uint256)"(
      userAddress?: string | null,
      nftAddress?: null,
      tokenId?: null
    ): UserUpdateEventFilter;
    UserUpdate(
      userAddress?: string | null,
      nftAddress?: null,
      tokenId?: null
    ): UserUpdateEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    NFT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    POINT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SPECIAL_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addNftAddress(
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTeam(
      _teamName: string,
      _teamDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cakeToken(overrides?: CallOverrides): Promise<BigNumber>;

    changeTeam(
      _userAddress: string,
      _newTeamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFee(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createProfile(
      _teamId: BigNumberish,
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTeamProfile(
      _teamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserProfile(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRegistered(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseTeamPoints(
      _teamId: BigNumberish,
      _numberPoints: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseUserPoints(
      _userAddress: string,
      _numberPoints: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseUserPointsMultiple(
      _userAddresses: string[],
      _numberPoints: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeTeamJoinable(
      _teamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeTeamNotJoinable(
      _teamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numberActiveProfiles(overrides?: CallOverrides): Promise<BigNumber>;

    numberCakeToReactivate(overrides?: CallOverrides): Promise<BigNumber>;

    numberCakeToRegister(overrides?: CallOverrides): Promise<BigNumber>;

    numberCakeToUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    numberTeams(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseProfile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reactivateProfile(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeTeamPoints(
      _teamId: BigNumberish,
      _numberPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeUserPoints(
      _userAddress: string,
      _numberPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeUserPointsMultiple(
      _userAddresses: string[],
      _numberPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renameTeam(
      _teamId: BigNumberish,
      _teamName: string,
      _teamDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateNumberCake(
      _newNumberCakeToReactivate: BigNumberish,
      _newNumberCakeToRegister: BigNumberish,
      _newNumberCakeToUpdate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProfile(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NFT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POINT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SPECIAL_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addNftAddress(
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTeam(
      _teamName: string,
      _teamDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeTeam(
      _userAddress: string,
      _newTeamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFee(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createProfile(
      _teamId: BigNumberish,
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTeamProfile(
      _teamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserProfile(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRegistered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseTeamPoints(
      _teamId: BigNumberish,
      _numberPoints: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseUserPoints(
      _userAddress: string,
      _numberPoints: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseUserPointsMultiple(
      _userAddresses: string[],
      _numberPoints: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeTeamJoinable(
      _teamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeTeamNotJoinable(
      _teamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numberActiveProfiles(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberCakeToReactivate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberCakeToRegister(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberCakeToUpdate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberTeams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseProfile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reactivateProfile(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeTeamPoints(
      _teamId: BigNumberish,
      _numberPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeUserPoints(
      _userAddress: string,
      _numberPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeUserPointsMultiple(
      _userAddresses: string[],
      _numberPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renameTeam(
      _teamId: BigNumberish,
      _teamName: string,
      _teamDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateNumberCake(
      _newNumberCakeToReactivate: BigNumberish,
      _newNumberCakeToRegister: BigNumberish,
      _newNumberCakeToUpdate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProfile(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
