/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type LotteryStruct = {
  status: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
  priceTicketInCake: BigNumberish;
  discountDivisor: BigNumberish;
  rewardsBreakdown: BigNumberish[];
  treasuryFee: BigNumberish;
  cakePerBracket: BigNumberish[];
  countWinnersPerBracket: BigNumberish[];
  firstTicketId: BigNumberish;
  firstTicketIdNextLottery: BigNumberish;
  amountCollectedInCake: BigNumberish;
  finalNumber: BigNumberish;
};

export type LotteryStructOutput = [
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber[],
  BigNumber,
  BigNumber[],
  BigNumber[],
  BigNumber,
  BigNumber,
  BigNumber,
  number
] & {
  status: number;
  startTime: BigNumber;
  endTime: BigNumber;
  priceTicketInCake: BigNumber;
  discountDivisor: BigNumber;
  rewardsBreakdown: BigNumber[];
  treasuryFee: BigNumber;
  cakePerBracket: BigNumber[];
  countWinnersPerBracket: BigNumber[];
  firstTicketId: BigNumber;
  firstTicketIdNextLottery: BigNumber;
  amountCollectedInCake: BigNumber;
  finalNumber: number;
};

export interface LotteryV2Interface extends utils.Interface {
  functions: {
    "MAX_LENGTH_LOTTERY()": FunctionFragment;
    "MAX_TREASURY_FEE()": FunctionFragment;
    "MIN_DISCOUNT_DIVISOR()": FunctionFragment;
    "MIN_LENGTH_LOTTERY()": FunctionFragment;
    "buyTickets(uint256,uint32[])": FunctionFragment;
    "cakeToken()": FunctionFragment;
    "calculateTotalPriceForBulkTickets(uint256,uint256,uint256)": FunctionFragment;
    "changeRandomGenerator(address)": FunctionFragment;
    "claimTickets(uint256,uint256[],uint32[])": FunctionFragment;
    "closeLottery(uint256)": FunctionFragment;
    "currentLotteryId()": FunctionFragment;
    "currentTicketId()": FunctionFragment;
    "drawFinalNumberAndMakeLotteryClaimable(uint256,bool)": FunctionFragment;
    "injectFunds(uint256,uint256)": FunctionFragment;
    "injectorAddress()": FunctionFragment;
    "maxNumberTicketsPerBuyOrClaim()": FunctionFragment;
    "maxPriceTicketInCake()": FunctionFragment;
    "minPriceTicketInCake()": FunctionFragment;
    "operatorAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingInjectionNextLottery()": FunctionFragment;
    "randomGenerator()": FunctionFragment;
    "recoverWrongTokens(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMaxNumberTicketsPerBuy(uint256)": FunctionFragment;
    "setMinAndMaxTicketPriceInCake(uint256,uint256)": FunctionFragment;
    "setOperatorAndTreasuryAndInjectorAddresses(address,address,address)": FunctionFragment;
    "startLottery(uint256,uint256,uint256,uint256[6],uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "viewCurrentLotteryId()": FunctionFragment;
    "viewLottery(uint256)": FunctionFragment;
    "viewNumbersAndStatusesForTicketIds(uint256[])": FunctionFragment;
    "viewRewardsForTicketId(uint256,uint256,uint32)": FunctionFragment;
    "viewUserInfoForLotteryId(address,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_LENGTH_LOTTERY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TREASURY_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DISCOUNT_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_LENGTH_LOTTERY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTickets",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "cakeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateTotalPriceForBulkTickets",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRandomGenerator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTickets",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closeLottery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentLotteryId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentTicketId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawFinalNumberAndMakeLotteryClaimable",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "injectFunds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "injectorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxNumberTicketsPerBuyOrClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceTicketInCake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPriceTicketInCake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingInjectionNextLottery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomGenerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverWrongTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxNumberTicketsPerBuy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAndMaxTicketPriceInCake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorAndTreasuryAndInjectorAddresses",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startLottery",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewCurrentLotteryId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewLottery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewNumbersAndStatusesForTicketIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "viewRewardsForTicketId",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewUserInfoForLotteryId",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_LENGTH_LOTTERY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TREASURY_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DISCOUNT_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LENGTH_LOTTERY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cakeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalPriceForBulkTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRandomGenerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentLotteryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTicketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawFinalNumberAndMakeLotteryClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "injectFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "injectorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxNumberTicketsPerBuyOrClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceTicketInCake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPriceTicketInCake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingInjectionNextLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomGenerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverWrongTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxNumberTicketsPerBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAndMaxTicketPriceInCake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorAndTreasuryAndInjectorAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewCurrentLotteryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewNumbersAndStatusesForTicketIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewRewardsForTicketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewUserInfoForLotteryId",
    data: BytesLike
  ): Result;

  events: {
    "AdminTokenRecovery(address,uint256)": EventFragment;
    "LotteryClose(uint256,uint256)": EventFragment;
    "LotteryInjection(uint256,uint256)": EventFragment;
    "LotteryNumberDrawn(uint256,uint256,uint256)": EventFragment;
    "LotteryOpen(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "NewOperatorAndTreasuryAndInjectorAddresses(address,address,address)": EventFragment;
    "NewRandomGenerator(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TicketsClaim(address,uint256,uint256,uint256)": EventFragment;
    "TicketsPurchase(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminTokenRecovery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryClose"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryInjection"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryNumberDrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryOpen"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewOperatorAndTreasuryAndInjectorAddresses"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRandomGenerator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketsClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketsPurchase"): EventFragment;
}

export type AdminTokenRecoveryEvent = TypedEvent<
  [string, BigNumber],
  { token: string; amount: BigNumber }
>;

export type AdminTokenRecoveryEventFilter =
  TypedEventFilter<AdminTokenRecoveryEvent>;

export type LotteryCloseEvent = TypedEvent<
  [BigNumber, BigNumber],
  { lotteryId: BigNumber; firstTicketIdNextLottery: BigNumber }
>;

export type LotteryCloseEventFilter = TypedEventFilter<LotteryCloseEvent>;

export type LotteryInjectionEvent = TypedEvent<
  [BigNumber, BigNumber],
  { lotteryId: BigNumber; injectedAmount: BigNumber }
>;

export type LotteryInjectionEventFilter =
  TypedEventFilter<LotteryInjectionEvent>;

export type LotteryNumberDrawnEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    lotteryId: BigNumber;
    finalNumber: BigNumber;
    countWinningTickets: BigNumber;
  }
>;

export type LotteryNumberDrawnEventFilter =
  TypedEventFilter<LotteryNumberDrawnEvent>;

export type LotteryOpenEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    lotteryId: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    priceTicketInCake: BigNumber;
    firstTicketId: BigNumber;
    injectedAmount: BigNumber;
  }
>;

export type LotteryOpenEventFilter = TypedEventFilter<LotteryOpenEvent>;

export type NewOperatorAndTreasuryAndInjectorAddressesEvent = TypedEvent<
  [string, string, string],
  { operator: string; treasury: string; injector: string }
>;

export type NewOperatorAndTreasuryAndInjectorAddressesEventFilter =
  TypedEventFilter<NewOperatorAndTreasuryAndInjectorAddressesEvent>;

export type NewRandomGeneratorEvent = TypedEvent<
  [string],
  { randomGenerator: string }
>;

export type NewRandomGeneratorEventFilter =
  TypedEventFilter<NewRandomGeneratorEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TicketsClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    claimer: string;
    amount: BigNumber;
    lotteryId: BigNumber;
    numberTickets: BigNumber;
  }
>;

export type TicketsClaimEventFilter = TypedEventFilter<TicketsClaimEvent>;

export type TicketsPurchaseEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { buyer: string; lotteryId: BigNumber; numberTickets: BigNumber }
>;

export type TicketsPurchaseEventFilter = TypedEventFilter<TicketsPurchaseEvent>;

export interface LotteryV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LotteryV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_LENGTH_LOTTERY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_DISCOUNT_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_LENGTH_LOTTERY(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyTickets(
      _lotteryId: BigNumberish,
      _ticketNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cakeToken(overrides?: CallOverrides): Promise<[string]>;

    calculateTotalPriceForBulkTickets(
      _discountDivisor: BigNumberish,
      _priceTicket: BigNumberish,
      _numberTickets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeRandomGenerator(
      _randomGeneratorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTickets(
      _lotteryId: BigNumberish,
      _ticketIds: BigNumberish[],
      _brackets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeLottery(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentLotteryId(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentTicketId(overrides?: CallOverrides): Promise<[BigNumber]>;

    drawFinalNumberAndMakeLotteryClaimable(
      _lotteryId: BigNumberish,
      _autoInjection: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    injectFunds(
      _lotteryId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    injectorAddress(overrides?: CallOverrides): Promise<[string]>;

    maxNumberTicketsPerBuyOrClaim(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxPriceTicketInCake(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPriceTicketInCake(overrides?: CallOverrides): Promise<[BigNumber]>;

    operatorAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingInjectionNextLottery(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    randomGenerator(overrides?: CallOverrides): Promise<[string]>;

    recoverWrongTokens(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxNumberTicketsPerBuy(
      _maxNumberTicketsPerBuy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinAndMaxTicketPriceInCake(
      _minPriceTicketInCake: BigNumberish,
      _maxPriceTicketInCake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperatorAndTreasuryAndInjectorAddresses(
      _operatorAddress: string,
      _treasuryAddress: string,
      _injectorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startLottery(
      _endTime: BigNumberish,
      _priceTicketInCake: BigNumberish,
      _discountDivisor: BigNumberish,
      _rewardsBreakdown: BigNumberish[],
      _treasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    viewCurrentLotteryId(overrides?: CallOverrides): Promise<[BigNumber]>;

    viewLottery(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[LotteryStructOutput]>;

    viewNumbersAndStatusesForTicketIds(
      _ticketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[number[], boolean[]]>;

    viewRewardsForTicketId(
      _lotteryId: BigNumberish,
      _ticketId: BigNumberish,
      _bracket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewUserInfoForLotteryId(
      _user: string,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], number[], boolean[], BigNumber]>;
  };

  MAX_LENGTH_LOTTERY(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_DISCOUNT_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LENGTH_LOTTERY(overrides?: CallOverrides): Promise<BigNumber>;

  buyTickets(
    _lotteryId: BigNumberish,
    _ticketNumbers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cakeToken(overrides?: CallOverrides): Promise<string>;

  calculateTotalPriceForBulkTickets(
    _discountDivisor: BigNumberish,
    _priceTicket: BigNumberish,
    _numberTickets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeRandomGenerator(
    _randomGeneratorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTickets(
    _lotteryId: BigNumberish,
    _ticketIds: BigNumberish[],
    _brackets: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeLottery(
    _lotteryId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentLotteryId(overrides?: CallOverrides): Promise<BigNumber>;

  currentTicketId(overrides?: CallOverrides): Promise<BigNumber>;

  drawFinalNumberAndMakeLotteryClaimable(
    _lotteryId: BigNumberish,
    _autoInjection: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  injectFunds(
    _lotteryId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  injectorAddress(overrides?: CallOverrides): Promise<string>;

  maxNumberTicketsPerBuyOrClaim(overrides?: CallOverrides): Promise<BigNumber>;

  maxPriceTicketInCake(overrides?: CallOverrides): Promise<BigNumber>;

  minPriceTicketInCake(overrides?: CallOverrides): Promise<BigNumber>;

  operatorAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingInjectionNextLottery(overrides?: CallOverrides): Promise<BigNumber>;

  randomGenerator(overrides?: CallOverrides): Promise<string>;

  recoverWrongTokens(
    _tokenAddress: string,
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxNumberTicketsPerBuy(
    _maxNumberTicketsPerBuy: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinAndMaxTicketPriceInCake(
    _minPriceTicketInCake: BigNumberish,
    _maxPriceTicketInCake: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperatorAndTreasuryAndInjectorAddresses(
    _operatorAddress: string,
    _treasuryAddress: string,
    _injectorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startLottery(
    _endTime: BigNumberish,
    _priceTicketInCake: BigNumberish,
    _discountDivisor: BigNumberish,
    _rewardsBreakdown: BigNumberish[],
    _treasuryFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  viewCurrentLotteryId(overrides?: CallOverrides): Promise<BigNumber>;

  viewLottery(
    _lotteryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LotteryStructOutput>;

  viewNumbersAndStatusesForTicketIds(
    _ticketIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[number[], boolean[]]>;

  viewRewardsForTicketId(
    _lotteryId: BigNumberish,
    _ticketId: BigNumberish,
    _bracket: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewUserInfoForLotteryId(
    _user: string,
    _lotteryId: BigNumberish,
    _cursor: BigNumberish,
    _size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], number[], boolean[], BigNumber]>;

  callStatic: {
    MAX_LENGTH_LOTTERY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DISCOUNT_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LENGTH_LOTTERY(overrides?: CallOverrides): Promise<BigNumber>;

    buyTickets(
      _lotteryId: BigNumberish,
      _ticketNumbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cakeToken(overrides?: CallOverrides): Promise<string>;

    calculateTotalPriceForBulkTickets(
      _discountDivisor: BigNumberish,
      _priceTicket: BigNumberish,
      _numberTickets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeRandomGenerator(
      _randomGeneratorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTickets(
      _lotteryId: BigNumberish,
      _ticketIds: BigNumberish[],
      _brackets: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    closeLottery(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentLotteryId(overrides?: CallOverrides): Promise<BigNumber>;

    currentTicketId(overrides?: CallOverrides): Promise<BigNumber>;

    drawFinalNumberAndMakeLotteryClaimable(
      _lotteryId: BigNumberish,
      _autoInjection: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    injectFunds(
      _lotteryId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    injectorAddress(overrides?: CallOverrides): Promise<string>;

    maxNumberTicketsPerBuyOrClaim(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPriceTicketInCake(overrides?: CallOverrides): Promise<BigNumber>;

    minPriceTicketInCake(overrides?: CallOverrides): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingInjectionNextLottery(overrides?: CallOverrides): Promise<BigNumber>;

    randomGenerator(overrides?: CallOverrides): Promise<string>;

    recoverWrongTokens(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMaxNumberTicketsPerBuy(
      _maxNumberTicketsPerBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAndMaxTicketPriceInCake(
      _minPriceTicketInCake: BigNumberish,
      _maxPriceTicketInCake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperatorAndTreasuryAndInjectorAddresses(
      _operatorAddress: string,
      _treasuryAddress: string,
      _injectorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startLottery(
      _endTime: BigNumberish,
      _priceTicketInCake: BigNumberish,
      _discountDivisor: BigNumberish,
      _rewardsBreakdown: BigNumberish[],
      _treasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    viewCurrentLotteryId(overrides?: CallOverrides): Promise<BigNumber>;

    viewLottery(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LotteryStructOutput>;

    viewNumbersAndStatusesForTicketIds(
      _ticketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[number[], boolean[]]>;

    viewRewardsForTicketId(
      _lotteryId: BigNumberish,
      _ticketId: BigNumberish,
      _bracket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewUserInfoForLotteryId(
      _user: string,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], number[], boolean[], BigNumber]>;
  };

  filters: {
    "AdminTokenRecovery(address,uint256)"(
      token?: null,
      amount?: null
    ): AdminTokenRecoveryEventFilter;
    AdminTokenRecovery(
      token?: null,
      amount?: null
    ): AdminTokenRecoveryEventFilter;

    "LotteryClose(uint256,uint256)"(
      lotteryId?: BigNumberish | null,
      firstTicketIdNextLottery?: null
    ): LotteryCloseEventFilter;
    LotteryClose(
      lotteryId?: BigNumberish | null,
      firstTicketIdNextLottery?: null
    ): LotteryCloseEventFilter;

    "LotteryInjection(uint256,uint256)"(
      lotteryId?: BigNumberish | null,
      injectedAmount?: null
    ): LotteryInjectionEventFilter;
    LotteryInjection(
      lotteryId?: BigNumberish | null,
      injectedAmount?: null
    ): LotteryInjectionEventFilter;

    "LotteryNumberDrawn(uint256,uint256,uint256)"(
      lotteryId?: BigNumberish | null,
      finalNumber?: null,
      countWinningTickets?: null
    ): LotteryNumberDrawnEventFilter;
    LotteryNumberDrawn(
      lotteryId?: BigNumberish | null,
      finalNumber?: null,
      countWinningTickets?: null
    ): LotteryNumberDrawnEventFilter;

    "LotteryOpen(uint256,uint256,uint256,uint256,uint256,uint256)"(
      lotteryId?: BigNumberish | null,
      startTime?: null,
      endTime?: null,
      priceTicketInCake?: null,
      firstTicketId?: null,
      injectedAmount?: null
    ): LotteryOpenEventFilter;
    LotteryOpen(
      lotteryId?: BigNumberish | null,
      startTime?: null,
      endTime?: null,
      priceTicketInCake?: null,
      firstTicketId?: null,
      injectedAmount?: null
    ): LotteryOpenEventFilter;

    "NewOperatorAndTreasuryAndInjectorAddresses(address,address,address)"(
      operator?: null,
      treasury?: null,
      injector?: null
    ): NewOperatorAndTreasuryAndInjectorAddressesEventFilter;
    NewOperatorAndTreasuryAndInjectorAddresses(
      operator?: null,
      treasury?: null,
      injector?: null
    ): NewOperatorAndTreasuryAndInjectorAddressesEventFilter;

    "NewRandomGenerator(address)"(
      randomGenerator?: string | null
    ): NewRandomGeneratorEventFilter;
    NewRandomGenerator(
      randomGenerator?: string | null
    ): NewRandomGeneratorEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TicketsClaim(address,uint256,uint256,uint256)"(
      claimer?: string | null,
      amount?: null,
      lotteryId?: BigNumberish | null,
      numberTickets?: null
    ): TicketsClaimEventFilter;
    TicketsClaim(
      claimer?: string | null,
      amount?: null,
      lotteryId?: BigNumberish | null,
      numberTickets?: null
    ): TicketsClaimEventFilter;

    "TicketsPurchase(address,uint256,uint256)"(
      buyer?: string | null,
      lotteryId?: BigNumberish | null,
      numberTickets?: null
    ): TicketsPurchaseEventFilter;
    TicketsPurchase(
      buyer?: string | null,
      lotteryId?: BigNumberish | null,
      numberTickets?: null
    ): TicketsPurchaseEventFilter;
  };

  estimateGas: {
    MAX_LENGTH_LOTTERY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DISCOUNT_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LENGTH_LOTTERY(overrides?: CallOverrides): Promise<BigNumber>;

    buyTickets(
      _lotteryId: BigNumberish,
      _ticketNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cakeToken(overrides?: CallOverrides): Promise<BigNumber>;

    calculateTotalPriceForBulkTickets(
      _discountDivisor: BigNumberish,
      _priceTicket: BigNumberish,
      _numberTickets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeRandomGenerator(
      _randomGeneratorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTickets(
      _lotteryId: BigNumberish,
      _ticketIds: BigNumberish[],
      _brackets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeLottery(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentLotteryId(overrides?: CallOverrides): Promise<BigNumber>;

    currentTicketId(overrides?: CallOverrides): Promise<BigNumber>;

    drawFinalNumberAndMakeLotteryClaimable(
      _lotteryId: BigNumberish,
      _autoInjection: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    injectFunds(
      _lotteryId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    injectorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxNumberTicketsPerBuyOrClaim(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPriceTicketInCake(overrides?: CallOverrides): Promise<BigNumber>;

    minPriceTicketInCake(overrides?: CallOverrides): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingInjectionNextLottery(overrides?: CallOverrides): Promise<BigNumber>;

    randomGenerator(overrides?: CallOverrides): Promise<BigNumber>;

    recoverWrongTokens(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxNumberTicketsPerBuy(
      _maxNumberTicketsPerBuy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinAndMaxTicketPriceInCake(
      _minPriceTicketInCake: BigNumberish,
      _maxPriceTicketInCake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperatorAndTreasuryAndInjectorAddresses(
      _operatorAddress: string,
      _treasuryAddress: string,
      _injectorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startLottery(
      _endTime: BigNumberish,
      _priceTicketInCake: BigNumberish,
      _discountDivisor: BigNumberish,
      _rewardsBreakdown: BigNumberish[],
      _treasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    viewCurrentLotteryId(overrides?: CallOverrides): Promise<BigNumber>;

    viewLottery(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewNumbersAndStatusesForTicketIds(
      _ticketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewRewardsForTicketId(
      _lotteryId: BigNumberish,
      _ticketId: BigNumberish,
      _bracket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewUserInfoForLotteryId(
      _user: string,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_LENGTH_LOTTERY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_DISCOUNT_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_LENGTH_LOTTERY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTickets(
      _lotteryId: BigNumberish,
      _ticketNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateTotalPriceForBulkTickets(
      _discountDivisor: BigNumberish,
      _priceTicket: BigNumberish,
      _numberTickets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeRandomGenerator(
      _randomGeneratorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTickets(
      _lotteryId: BigNumberish,
      _ticketIds: BigNumberish[],
      _brackets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeLottery(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentLotteryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentTicketId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drawFinalNumberAndMakeLotteryClaimable(
      _lotteryId: BigNumberish,
      _autoInjection: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    injectFunds(
      _lotteryId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    injectorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxNumberTicketsPerBuyOrClaim(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPriceTicketInCake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minPriceTicketInCake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingInjectionNextLottery(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    randomGenerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverWrongTokens(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxNumberTicketsPerBuy(
      _maxNumberTicketsPerBuy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinAndMaxTicketPriceInCake(
      _minPriceTicketInCake: BigNumberish,
      _maxPriceTicketInCake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperatorAndTreasuryAndInjectorAddresses(
      _operatorAddress: string,
      _treasuryAddress: string,
      _injectorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startLottery(
      _endTime: BigNumberish,
      _priceTicketInCake: BigNumberish,
      _discountDivisor: BigNumberish,
      _rewardsBreakdown: BigNumberish[],
      _treasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewCurrentLotteryId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewLottery(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewNumbersAndStatusesForTicketIds(
      _ticketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewRewardsForTicketId(
      _lotteryId: BigNumberish,
      _ticketId: BigNumberish,
      _bracket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewUserInfoForLotteryId(
      _user: string,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
