/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CakeVaultV2Interface extends utils.Interface {
  functions: {
    "BOOST_WEIGHT()": FunctionFragment;
    "BOOST_WEIGHT_LIMIT()": FunctionFragment;
    "DURATION_FACTOR()": FunctionFragment;
    "DURATION_FACTOR_OVERDUE()": FunctionFragment;
    "MAX_CALL_FEE()": FunctionFragment;
    "MAX_LOCK_DURATION()": FunctionFragment;
    "MAX_LOCK_DURATION_LIMIT()": FunctionFragment;
    "MAX_PERFORMANCE_FEE()": FunctionFragment;
    "MAX_WITHDRAW_FEE()": FunctionFragment;
    "MAX_WITHDRAW_FEE_PERIOD()": FunctionFragment;
    "MIN_DEPOSIT_AMOUNT()": FunctionFragment;
    "MIN_LOCK_DURATION()": FunctionFragment;
    "MIN_WITHDRAW_AMOUNT()": FunctionFragment;
    "PRECISION_FACTOR()": FunctionFragment;
    "PRECISION_FACTOR_SHARE()": FunctionFragment;
    "UNLOCK_FREE_DURATION()": FunctionFragment;
    "admin()": FunctionFragment;
    "available()": FunctionFragment;
    "balanceOf()": FunctionFragment;
    "boostContract()": FunctionFragment;
    "cakePoolPID()": FunctionFragment;
    "calculateOverdueFee(address)": FunctionFragment;
    "calculatePerformanceFee(address)": FunctionFragment;
    "calculateTotalPendingCakeRewards()": FunctionFragment;
    "calculateWithdrawFee(address,uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "freeFeeUsers(address)": FunctionFragment;
    "getPricePerFullShare()": FunctionFragment;
    "inCaseTokensGetStuck(address)": FunctionFragment;
    "init(address)": FunctionFragment;
    "lastHarvestedTime()": FunctionFragment;
    "masterchefV2()": FunctionFragment;
    "operator()": FunctionFragment;
    "overdueFee()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "performanceFee()": FunctionFragment;
    "performanceFeeContract()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setBoostContract(address)": FunctionFragment;
    "setBoostWeight(uint256)": FunctionFragment;
    "setDurationFactor(uint256)": FunctionFragment;
    "setDurationFactorOverdue(uint256)": FunctionFragment;
    "setFreeFeeUser(address,bool)": FunctionFragment;
    "setMaxLockDuration(uint256)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setPerformanceFee(uint256)": FunctionFragment;
    "setPerformanceFeeContract(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setUnlockFreeDuration(uint256)": FunctionFragment;
    "setWithdrawFee(uint256)": FunctionFragment;
    "setWithdrawFeeContract(uint256)": FunctionFragment;
    "setWithdrawFeePeriod(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "totalBoostDebt()": FunctionFragment;
    "totalLockedAmount()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "unlock(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
    "withdrawByAmount(uint256)": FunctionFragment;
    "withdrawFee()": FunctionFragment;
    "withdrawFeeContract()": FunctionFragment;
    "withdrawFeePeriod()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BOOST_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BOOST_WEIGHT_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DURATION_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DURATION_FACTOR_OVERDUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CALL_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LOCK_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LOCK_DURATION_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PERFORMANCE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WITHDRAW_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WITHDRAW_FEE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DEPOSIT_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_LOCK_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_WITHDRAW_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRECISION_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRECISION_FACTOR_SHARE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNLOCK_FREE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "available", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boostContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cakePoolPID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOverdueFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePerformanceFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalPendingCakeRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWithdrawFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freeFeeUsers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPricePerFullShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inCaseTokensGetStuck",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastHarvestedTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterchefV2",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "overdueFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceFeeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBoostContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBoostWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDurationFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDurationFactorOverdue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreeFeeUser",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLockDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFeeContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setUnlockFreeDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFeeContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFeePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBoostDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unlock", values: [string]): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawByAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeePeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BOOST_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BOOST_WEIGHT_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DURATION_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DURATION_FACTOR_OVERDUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CALL_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LOCK_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LOCK_DURATION_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PERFORMANCE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WITHDRAW_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WITHDRAW_FEE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DEPOSIT_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LOCK_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_WITHDRAW_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_FACTOR_SHARE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNLOCK_FREE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cakePoolPID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOverdueFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalPendingCakeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freeFeeUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricePerFullShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inCaseTokensGetStuck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastHarvestedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterchefV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "overdueFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceFeeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBoostContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBoostWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDurationFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDurationFactorOverdue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreeFeeUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFeeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnlockFreeDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFeeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFeePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBoostDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawByAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeePeriod",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Harvest(address,uint256)": EventFragment;
    "Init()": EventFragment;
    "Lock(address,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pause()": EventFragment;
    "Paused(address)": EventFragment;
    "Unlock(address,uint256,uint256)": EventFragment;
    "Unpause()": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Init"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    sender: string;
    amount: BigNumber;
    shares: BigNumber;
    duration: BigNumber;
    lastDepositedTime: BigNumber;
  }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type HarvestEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; amount: BigNumber }
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export type InitEvent = TypedEvent<[], {}>;

export type InitEventFilter = TypedEventFilter<InitEvent>;

export type LockEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    sender: string;
    lockedAmount: BigNumber;
    shares: BigNumber;
    lockedDuration: BigNumber;
    blockTimestamp: BigNumber;
  }
>;

export type LockEventFilter = TypedEventFilter<LockEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PauseEvent = TypedEvent<[], {}>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnlockEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; amount: BigNumber; blockTimestamp: BigNumber }
>;

export type UnlockEventFilter = TypedEventFilter<UnlockEvent>;

export type UnpauseEvent = TypedEvent<[], {}>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; amount: BigNumber; shares: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface CakeVaultV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CakeVaultV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BOOST_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    BOOST_WEIGHT_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    DURATION_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    DURATION_FACTOR_OVERDUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_CALL_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_LOCK_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_LOCK_DURATION_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_WITHDRAW_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION_FACTOR_SHARE(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNLOCK_FREE_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    available(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    boostContract(overrides?: CallOverrides): Promise<[string]>;

    cakePoolPID(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateOverdueFee(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePerformanceFee(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateTotalPendingCakeRewards(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateWithdrawFee(
      _user: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      _amount: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freeFeeUsers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    inCaseTokensGetStuck(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      dummyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastHarvestedTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    masterchefV2(overrides?: CallOverrides): Promise<[string]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    overdueFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    performanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceFeeContract(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBoostContract(
      _boostContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBoostWeight(
      _boostWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDurationFactor(
      _durationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDurationFactorOverdue(
      _durationFactorOverdue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFreeFeeUser(
      _user: string,
      _free: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxLockDuration(
      _maxLockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerformanceFeeContract(
      _performanceFeeContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnlockFreeDuration(
      _unlockFreeDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFee(
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFeeContract(
      _withdrawFeeContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFeePeriod(
      _withdrawFeePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalBoostDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLockedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unlock(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        shares: BigNumber;
        lastDepositedTime: BigNumber;
        cakeAtLastUserAction: BigNumber;
        lastUserActionTime: BigNumber;
        lockStartTime: BigNumber;
        lockEndTime: BigNumber;
        userBoostedShare: BigNumber;
        locked: boolean;
        lockedAmount: BigNumber;
      }
    >;

    withdraw(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawByAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFeeContract(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BOOST_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  BOOST_WEIGHT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  DURATION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  DURATION_FACTOR_OVERDUE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_CALL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LOCK_DURATION_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_WITHDRAW_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION_FACTOR_SHARE(overrides?: CallOverrides): Promise<BigNumber>;

  UNLOCK_FREE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  available(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  boostContract(overrides?: CallOverrides): Promise<string>;

  cakePoolPID(overrides?: CallOverrides): Promise<BigNumber>;

  calculateOverdueFee(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePerformanceFee(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTotalPendingCakeRewards(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateWithdrawFee(
    _user: string,
    _shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    _amount: BigNumberish,
    _lockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freeFeeUsers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

  inCaseTokensGetStuck(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    dummyToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastHarvestedTime(overrides?: CallOverrides): Promise<BigNumber>;

  masterchefV2(overrides?: CallOverrides): Promise<string>;

  operator(overrides?: CallOverrides): Promise<string>;

  overdueFee(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  performanceFeeContract(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBoostContract(
    _boostContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBoostWeight(
    _boostWeight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDurationFactor(
    _durationFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDurationFactorOverdue(
    _durationFactorOverdue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFreeFeeUser(
    _user: string,
    _free: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxLockDuration(
    _maxLockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerformanceFee(
    _performanceFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerformanceFeeContract(
    _performanceFeeContract: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnlockFreeDuration(
    _unlockFreeDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFee(
    _withdrawFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFeeContract(
    _withdrawFeeContract: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFeePeriod(
    _withdrawFeePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  totalBoostDebt(overrides?: CallOverrides): Promise<BigNumber>;

  totalLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unlock(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      shares: BigNumber;
      lastDepositedTime: BigNumber;
      cakeAtLastUserAction: BigNumber;
      lastUserActionTime: BigNumber;
      lockStartTime: BigNumber;
      lockEndTime: BigNumber;
      userBoostedShare: BigNumber;
      locked: boolean;
      lockedAmount: BigNumber;
    }
  >;

  withdraw(
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawByAmount(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFeeContract(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BOOST_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    BOOST_WEIGHT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    DURATION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    DURATION_FACTOR_OVERDUE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CALL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_DURATION_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WITHDRAW_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_FACTOR_SHARE(overrides?: CallOverrides): Promise<BigNumber>;

    UNLOCK_FREE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    available(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    boostContract(overrides?: CallOverrides): Promise<string>;

    cakePoolPID(overrides?: CallOverrides): Promise<BigNumber>;

    calculateOverdueFee(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePerformanceFee(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalPendingCakeRewards(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateWithdrawFee(
      _user: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    freeFeeUsers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    inCaseTokensGetStuck(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    init(dummyToken: string, overrides?: CallOverrides): Promise<void>;

    lastHarvestedTime(overrides?: CallOverrides): Promise<BigNumber>;

    masterchefV2(overrides?: CallOverrides): Promise<string>;

    operator(overrides?: CallOverrides): Promise<string>;

    overdueFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFeeContract(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setBoostContract(
      _boostContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBoostWeight(
      _boostWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDurationFactor(
      _durationFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDurationFactorOverdue(
      _durationFactorOverdue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFreeFeeUser(
      _user: string,
      _free: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLockDuration(
      _maxLockDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(_operator: string, overrides?: CallOverrides): Promise<void>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerformanceFeeContract(
      _performanceFeeContract: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    setUnlockFreeDuration(
      _unlockFreeDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFee(
      _withdrawFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFeeContract(
      _withdrawFeeContract: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFeePeriod(
      _withdrawFeePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    totalBoostDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unlock(_user: string, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        shares: BigNumber;
        lastDepositedTime: BigNumber;
        cakeAtLastUserAction: BigNumber;
        lastUserActionTime: BigNumber;
        lockStartTime: BigNumber;
        lockEndTime: BigNumber;
        userBoostedShare: BigNumber;
        locked: boolean;
        lockedAmount: BigNumber;
      }
    >;

    withdraw(_shares: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;

    withdrawByAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeContract(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Deposit(address,uint256,uint256,uint256,uint256)"(
      sender?: string | null,
      amount?: null,
      shares?: null,
      duration?: null,
      lastDepositedTime?: null
    ): DepositEventFilter;
    Deposit(
      sender?: string | null,
      amount?: null,
      shares?: null,
      duration?: null,
      lastDepositedTime?: null
    ): DepositEventFilter;

    "Harvest(address,uint256)"(
      sender?: string | null,
      amount?: null
    ): HarvestEventFilter;
    Harvest(sender?: string | null, amount?: null): HarvestEventFilter;

    "Init()"(): InitEventFilter;
    Init(): InitEventFilter;

    "Lock(address,uint256,uint256,uint256,uint256)"(
      sender?: string | null,
      lockedAmount?: null,
      shares?: null,
      lockedDuration?: null,
      blockTimestamp?: null
    ): LockEventFilter;
    Lock(
      sender?: string | null,
      lockedAmount?: null,
      shares?: null,
      lockedDuration?: null,
      blockTimestamp?: null
    ): LockEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Pause()"(): PauseEventFilter;
    Pause(): PauseEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unlock(address,uint256,uint256)"(
      sender?: string | null,
      amount?: null,
      blockTimestamp?: null
    ): UnlockEventFilter;
    Unlock(
      sender?: string | null,
      amount?: null,
      blockTimestamp?: null
    ): UnlockEventFilter;

    "Unpause()"(): UnpauseEventFilter;
    Unpause(): UnpauseEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(address,uint256,uint256)"(
      sender?: string | null,
      amount?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      sender?: string | null,
      amount?: null,
      shares?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    BOOST_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    BOOST_WEIGHT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    DURATION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    DURATION_FACTOR_OVERDUE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CALL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_DURATION_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WITHDRAW_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_FACTOR_SHARE(overrides?: CallOverrides): Promise<BigNumber>;

    UNLOCK_FREE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    available(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    boostContract(overrides?: CallOverrides): Promise<BigNumber>;

    cakePoolPID(overrides?: CallOverrides): Promise<BigNumber>;

    calculateOverdueFee(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePerformanceFee(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalPendingCakeRewards(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateWithdrawFee(
      _user: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freeFeeUsers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    inCaseTokensGetStuck(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      dummyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastHarvestedTime(overrides?: CallOverrides): Promise<BigNumber>;

    masterchefV2(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    overdueFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFeeContract(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBoostContract(
      _boostContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBoostWeight(
      _boostWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDurationFactor(
      _durationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDurationFactorOverdue(
      _durationFactorOverdue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFreeFeeUser(
      _user: string,
      _free: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxLockDuration(
      _maxLockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerformanceFeeContract(
      _performanceFeeContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnlockFreeDuration(
      _unlockFreeDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawFee(
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawFeeContract(
      _withdrawFeeContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawFeePeriod(
      _withdrawFeePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalBoostDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawByAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeContract(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BOOST_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BOOST_WEIGHT_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DURATION_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DURATION_FACTOR_OVERDUE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_CALL_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_LOCK_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_LOCK_DURATION_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PERFORMANCE_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_WITHDRAW_FEE_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_DEPOSIT_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_WITHDRAW_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION_FACTOR_SHARE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNLOCK_FREE_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    available(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boostContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cakePoolPID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateOverdueFee(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePerformanceFee(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTotalPendingCakeRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateWithdrawFee(
      _user: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freeFeeUsers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPricePerFullShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inCaseTokensGetStuck(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      dummyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastHarvestedTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterchefV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    overdueFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFeeContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBoostContract(
      _boostContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBoostWeight(
      _boostWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDurationFactor(
      _durationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDurationFactorOverdue(
      _durationFactorOverdue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFreeFeeUser(
      _user: string,
      _free: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLockDuration(
      _maxLockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceFeeContract(
      _performanceFeeContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnlockFreeDuration(
      _unlockFreeDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFee(
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFeeContract(
      _withdrawFeeContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFeePeriod(
      _withdrawFeePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBoostDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawByAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFeeContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
