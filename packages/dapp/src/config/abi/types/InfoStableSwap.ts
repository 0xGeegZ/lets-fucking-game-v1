/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface InfoStableSwapInterface extends utils.Interface {
  functions: {
    "FEE_DENOMINATOR()": FunctionFragment;
    "N_COINS()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "PRECISION_MUL(address)": FunctionFragment;
    "RATES(address)": FunctionFragment;
    "_xp_mem(address,uint256[2])": FunctionFragment;
    "balances(address)": FunctionFragment;
    "calc_coins_amount(address,uint256)": FunctionFragment;
    "get_D_mem(address,uint256[2],uint256)": FunctionFragment;
    "get_add_liquidity_fee(address,uint256[2])": FunctionFragment;
    "get_add_liquidity_mint_amount(address,uint256[2])": FunctionFragment;
    "get_exchange_fee(address,uint256,uint256,uint256)": FunctionFragment;
    "get_remove_liquidity_imbalance_fee(address,uint256[2])": FunctionFragment;
    "get_remove_liquidity_one_coin_fee(address,uint256,uint256)": FunctionFragment;
    "token(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "N_COINS", values?: undefined): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRECISION_MUL",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "RATES", values: [string]): string;
  encodeFunctionData(
    functionFragment: "_xp_mem",
    values: [string, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calc_coins_amount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_D_mem",
    values: [string, [BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_add_liquidity_fee",
    values: [string, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "get_add_liquidity_mint_amount",
    values: [string, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "get_exchange_fee",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_remove_liquidity_imbalance_fee",
    values: [string, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "get_remove_liquidity_one_coin_fee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "N_COINS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_MUL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RATES", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_xp_mem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calc_coins_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_D_mem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_add_liquidity_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_add_liquidity_mint_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_exchange_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_remove_liquidity_imbalance_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_remove_liquidity_one_coin_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {};
}

export interface InfoStableSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InfoStableSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    N_COINS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION_MUL(
      _swap: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber]] & { swapPRECISION_MUL: [BigNumber, BigNumber] }
    >;

    RATES(
      _swap: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber]] & { swapRATES: [BigNumber, BigNumber] }
    >;

    _xp_mem(
      _swap: string,
      _balances: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]] & { result: [BigNumber, BigNumber] }>;

    balances(
      _swap: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber]] & { swapBalances: [BigNumber, BigNumber] }
    >;

    calc_coins_amount(
      _swap: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]]>;

    get_D_mem(
      _swap: string,
      _balances: [BigNumberish, BigNumberish],
      amp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get_add_liquidity_fee(
      _swap: string,
      amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber]] & { liquidityFee: [BigNumber, BigNumber] }
    >;

    get_add_liquidity_mint_amount(
      _swap: string,
      amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get_exchange_fee(
      _swap: string,
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { exFee: BigNumber; exAdminFee: BigNumber }
    >;

    get_remove_liquidity_imbalance_fee(
      _swap: string,
      amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber]] & { liquidityFee: [BigNumber, BigNumber] }
    >;

    get_remove_liquidity_one_coin_fee(
      _swap: string,
      _token_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { adminFee: BigNumber }>;

    token(_swap: string, overrides?: CallOverrides): Promise<[string]>;
  };

  FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  N_COINS(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION_MUL(
    _swap: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  RATES(
    _swap: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  _xp_mem(
    _swap: string,
    _balances: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  balances(
    _swap: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  calc_coins_amount(
    _swap: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  get_D_mem(
    _swap: string,
    _balances: [BigNumberish, BigNumberish],
    amp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_add_liquidity_fee(
    _swap: string,
    amounts: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  get_add_liquidity_mint_amount(
    _swap: string,
    amounts: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_exchange_fee(
    _swap: string,
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { exFee: BigNumber; exAdminFee: BigNumber }
  >;

  get_remove_liquidity_imbalance_fee(
    _swap: string,
    amounts: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  get_remove_liquidity_one_coin_fee(
    _swap: string,
    _token_amount: BigNumberish,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  token(_swap: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    N_COINS(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_MUL(
      _swap: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    RATES(
      _swap: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    _xp_mem(
      _swap: string,
      _balances: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    balances(
      _swap: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    calc_coins_amount(
      _swap: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    get_D_mem(
      _swap: string,
      _balances: [BigNumberish, BigNumberish],
      amp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_add_liquidity_fee(
      _swap: string,
      amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    get_add_liquidity_mint_amount(
      _swap: string,
      amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_exchange_fee(
      _swap: string,
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { exFee: BigNumber; exAdminFee: BigNumber }
    >;

    get_remove_liquidity_imbalance_fee(
      _swap: string,
      amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    get_remove_liquidity_one_coin_fee(
      _swap: string,
      _token_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(_swap: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    N_COINS(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_MUL(_swap: string, overrides?: CallOverrides): Promise<BigNumber>;

    RATES(_swap: string, overrides?: CallOverrides): Promise<BigNumber>;

    _xp_mem(
      _swap: string,
      _balances: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(_swap: string, overrides?: CallOverrides): Promise<BigNumber>;

    calc_coins_amount(
      _swap: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_D_mem(
      _swap: string,
      _balances: [BigNumberish, BigNumberish],
      amp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_add_liquidity_fee(
      _swap: string,
      amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_add_liquidity_mint_amount(
      _swap: string,
      amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_exchange_fee(
      _swap: string,
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_remove_liquidity_imbalance_fee(
      _swap: string,
      amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_remove_liquidity_one_coin_fee(
      _swap: string,
      _token_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(_swap: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    N_COINS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION_MUL(
      _swap: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RATES(
      _swap: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _xp_mem(
      _swap: string,
      _balances: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      _swap: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calc_coins_amount(
      _swap: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_D_mem(
      _swap: string,
      _balances: [BigNumberish, BigNumberish],
      amp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_add_liquidity_fee(
      _swap: string,
      amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_add_liquidity_mint_amount(
      _swap: string,
      amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_exchange_fee(
      _swap: string,
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_remove_liquidity_imbalance_fee(
      _swap: string,
      amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_remove_liquidity_one_coin_fee(
      _swap: string,
      _token_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(
      _swap: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
