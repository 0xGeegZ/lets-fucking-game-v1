/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type AskStruct = { seller: string; price: BigNumberish };

export type AskStructOutput = [string, BigNumber] & {
  seller: string;
  price: BigNumber;
};

export type CollectionStruct = {
  status: BigNumberish;
  creatorAddress: string;
  whitelistChecker: string;
  tradingFee: BigNumberish;
  creatorFee: BigNumberish;
};

export type CollectionStructOutput = [
  number,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  status: number;
  creatorAddress: string;
  whitelistChecker: string;
  tradingFee: BigNumber;
  creatorFee: BigNumber;
};

export interface NftMarketInterface extends utils.Interface {
  functions: {
    "TOTAL_MAX_FEE()": FunctionFragment;
    "WBNB()": FunctionFragment;
    "addCollection(address,address,address,uint256,uint256)": FunctionFragment;
    "adminAddress()": FunctionFragment;
    "buyTokenUsingBNB(address,uint256)": FunctionFragment;
    "buyTokenUsingWBNB(address,uint256,uint256)": FunctionFragment;
    "calculatePriceAndFeesForCollection(address,uint256)": FunctionFragment;
    "canTokensBeListed(address,uint256[])": FunctionFragment;
    "cancelAskOrder(address,uint256)": FunctionFragment;
    "claimPendingRevenue()": FunctionFragment;
    "closeCollectionForTradingAndListing(address)": FunctionFragment;
    "createAskOrder(address,uint256,uint256)": FunctionFragment;
    "maximumAskPrice()": FunctionFragment;
    "minimumAskPrice()": FunctionFragment;
    "modifyAskOrder(address,uint256,uint256)": FunctionFragment;
    "modifyCollection(address,address,address,uint256,uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingRevenue(address)": FunctionFragment;
    "recoverFungibleTokens(address)": FunctionFragment;
    "recoverNonFungibleToken(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdminAndTreasuryAddresses(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "updateMinimumAndMaximumPrices(uint256,uint256)": FunctionFragment;
    "viewAsksByCollection(address,uint256,uint256)": FunctionFragment;
    "viewAsksByCollectionAndTokenIds(address,uint256[])": FunctionFragment;
    "viewAsksByCollectionAndSeller(address,address,uint256,uint256)": FunctionFragment;
    "viewCollections(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TOTAL_MAX_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WBNB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addCollection",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenUsingBNB",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenUsingWBNB",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePriceAndFeesForCollection",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canTokensBeListed",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAskOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPendingRevenue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeCollectionForTradingAndListing",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createAskOrder",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumAskPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumAskPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modifyAskOrder",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyCollection",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRevenue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFungibleTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverNonFungibleToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminAndTreasuryAddresses",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinimumAndMaximumPrices",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewAsksByCollection",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewAsksByCollectionAndTokenIds",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "viewAsksByCollectionAndSeller",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewCollections",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "TOTAL_MAX_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WBNB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenUsingBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenUsingWBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePriceAndFeesForCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canTokensBeListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAskOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPendingRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeCollectionForTradingAndListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAskOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumAskPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumAskPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyAskOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFungibleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverNonFungibleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminAndTreasuryAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinimumAndMaximumPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAsksByCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAsksByCollectionAndTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAsksByCollectionAndSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewCollections",
    data: BytesLike
  ): Result;

  events: {
    "AskCancel(address,address,uint256)": EventFragment;
    "AskNew(address,address,uint256,uint256)": EventFragment;
    "AskUpdate(address,address,uint256,uint256)": EventFragment;
    "CollectionClose(address)": EventFragment;
    "CollectionNew(address,address,address,uint256,uint256)": EventFragment;
    "CollectionUpdate(address,address,address,uint256,uint256)": EventFragment;
    "NewAdminAndTreasuryAddresses(address,address)": EventFragment;
    "NewMinimumAndMaximumAskPrices(uint256,uint256)": EventFragment;
    "NonFungibleTokenRecovery(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RevenueClaim(address,uint256)": EventFragment;
    "TokenRecovery(address,uint256)": EventFragment;
    "Trade(address,uint256,address,address,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AskCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AskNew"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AskUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionClose"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionNew"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionUpdate"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewAdminAndTreasuryAddresses"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewMinimumAndMaximumAskPrices"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonFungibleTokenRecovery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRecovery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
}

export type AskCancelEvent = TypedEvent<
  [string, string, BigNumber],
  { collection: string; seller: string; tokenId: BigNumber }
>;

export type AskCancelEventFilter = TypedEventFilter<AskCancelEvent>;

export type AskNewEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    collection: string;
    seller: string;
    tokenId: BigNumber;
    askPrice: BigNumber;
  }
>;

export type AskNewEventFilter = TypedEventFilter<AskNewEvent>;

export type AskUpdateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    collection: string;
    seller: string;
    tokenId: BigNumber;
    askPrice: BigNumber;
  }
>;

export type AskUpdateEventFilter = TypedEventFilter<AskUpdateEvent>;

export type CollectionCloseEvent = TypedEvent<[string], { collection: string }>;

export type CollectionCloseEventFilter = TypedEventFilter<CollectionCloseEvent>;

export type CollectionNewEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    collection: string;
    creator: string;
    whitelistChecker: string;
    tradingFee: BigNumber;
    creatorFee: BigNumber;
  }
>;

export type CollectionNewEventFilter = TypedEventFilter<CollectionNewEvent>;

export type CollectionUpdateEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    collection: string;
    creator: string;
    whitelistChecker: string;
    tradingFee: BigNumber;
    creatorFee: BigNumber;
  }
>;

export type CollectionUpdateEventFilter =
  TypedEventFilter<CollectionUpdateEvent>;

export type NewAdminAndTreasuryAddressesEvent = TypedEvent<
  [string, string],
  { admin: string; treasury: string }
>;

export type NewAdminAndTreasuryAddressesEventFilter =
  TypedEventFilter<NewAdminAndTreasuryAddressesEvent>;

export type NewMinimumAndMaximumAskPricesEvent = TypedEvent<
  [BigNumber, BigNumber],
  { minimumAskPrice: BigNumber; maximumAskPrice: BigNumber }
>;

export type NewMinimumAndMaximumAskPricesEventFilter =
  TypedEventFilter<NewMinimumAndMaximumAskPricesEvent>;

export type NonFungibleTokenRecoveryEvent = TypedEvent<
  [string, BigNumber],
  { token: string; tokenId: BigNumber }
>;

export type NonFungibleTokenRecoveryEventFilter =
  TypedEventFilter<NonFungibleTokenRecoveryEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RevenueClaimEvent = TypedEvent<
  [string, BigNumber],
  { claimer: string; amount: BigNumber }
>;

export type RevenueClaimEventFilter = TypedEventFilter<RevenueClaimEvent>;

export type TokenRecoveryEvent = TypedEvent<
  [string, BigNumber],
  { token: string; amount: BigNumber }
>;

export type TokenRecoveryEventFilter = TypedEventFilter<TokenRecoveryEvent>;

export type TradeEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber, boolean],
  {
    collection: string;
    tokenId: BigNumber;
    seller: string;
    buyer: string;
    askPrice: BigNumber;
    netPrice: BigNumber;
    withBNB: boolean;
  }
>;

export type TradeEventFilter = TypedEventFilter<TradeEvent>;

export interface NftMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NftMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TOTAL_MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    WBNB(overrides?: CallOverrides): Promise<[string]>;

    addCollection(
      _collection: string,
      _creator: string,
      _whitelistChecker: string,
      _tradingFee: BigNumberish,
      _creatorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    buyTokenUsingBNB(
      _collection: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyTokenUsingWBNB(
      _collection: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculatePriceAndFeesForCollection(
      collection: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netPrice: BigNumber;
        tradingFee: BigNumber;
        creatorFee: BigNumber;
      }
    >;

    canTokensBeListed(
      _collection: string,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean[]] & { listingStatuses: boolean[] }>;

    cancelAskOrder(
      _collection: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPendingRevenue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeCollectionForTradingAndListing(
      _collection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAskOrder(
      _collection: string,
      _tokenId: BigNumberish,
      _askPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maximumAskPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumAskPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    modifyAskOrder(
      _collection: string,
      _tokenId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modifyCollection(
      _collection: string,
      _creator: string,
      _whitelistChecker: string,
      _tradingFee: BigNumberish,
      _creatorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingRevenue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    recoverFungibleTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverNonFungibleToken(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdminAndTreasuryAddresses(
      _adminAddress: string,
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    updateMinimumAndMaximumPrices(
      _minimumAskPrice: BigNumberish,
      _maximumAskPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewAsksByCollection(
      collection: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], AskStructOutput[], BigNumber] & {
        tokenIds: BigNumber[];
        askInfo: AskStructOutput[];
      }
    >;

    viewAsksByCollectionAndTokenIds(
      collection: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [boolean[], AskStructOutput[]] & {
        statuses: boolean[];
        askInfo: AskStructOutput[];
      }
    >;

    viewAsksByCollectionAndSeller(
      collection: string,
      seller: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], AskStructOutput[], BigNumber] & {
        tokenIds: BigNumber[];
        askInfo: AskStructOutput[];
      }
    >;

    viewCollections(
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], CollectionStructOutput[], BigNumber] & {
        collectionAddresses: string[];
        collectionDetails: CollectionStructOutput[];
      }
    >;
  };

  TOTAL_MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  WBNB(overrides?: CallOverrides): Promise<string>;

  addCollection(
    _collection: string,
    _creator: string,
    _whitelistChecker: string,
    _tradingFee: BigNumberish,
    _creatorFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminAddress(overrides?: CallOverrides): Promise<string>;

  buyTokenUsingBNB(
    _collection: string,
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyTokenUsingWBNB(
    _collection: string,
    _tokenId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculatePriceAndFeesForCollection(
    collection: string,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      netPrice: BigNumber;
      tradingFee: BigNumber;
      creatorFee: BigNumber;
    }
  >;

  canTokensBeListed(
    _collection: string,
    _tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  cancelAskOrder(
    _collection: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPendingRevenue(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeCollectionForTradingAndListing(
    _collection: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAskOrder(
    _collection: string,
    _tokenId: BigNumberish,
    _askPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maximumAskPrice(overrides?: CallOverrides): Promise<BigNumber>;

  minimumAskPrice(overrides?: CallOverrides): Promise<BigNumber>;

  modifyAskOrder(
    _collection: string,
    _tokenId: BigNumberish,
    _newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modifyCollection(
    _collection: string,
    _creator: string,
    _whitelistChecker: string,
    _tradingFee: BigNumberish,
    _creatorFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingRevenue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  recoverFungibleTokens(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverNonFungibleToken(
    _token: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdminAndTreasuryAddresses(
    _adminAddress: string,
    _treasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  updateMinimumAndMaximumPrices(
    _minimumAskPrice: BigNumberish,
    _maximumAskPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewAsksByCollection(
    collection: string,
    cursor: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], AskStructOutput[], BigNumber] & {
      tokenIds: BigNumber[];
      askInfo: AskStructOutput[];
    }
  >;

  viewAsksByCollectionAndTokenIds(
    collection: string,
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [boolean[], AskStructOutput[]] & {
      statuses: boolean[];
      askInfo: AskStructOutput[];
    }
  >;

  viewAsksByCollectionAndSeller(
    collection: string,
    seller: string,
    cursor: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], AskStructOutput[], BigNumber] & {
      tokenIds: BigNumber[];
      askInfo: AskStructOutput[];
    }
  >;

  viewCollections(
    cursor: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], CollectionStructOutput[], BigNumber] & {
      collectionAddresses: string[];
      collectionDetails: CollectionStructOutput[];
    }
  >;

  callStatic: {
    TOTAL_MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    WBNB(overrides?: CallOverrides): Promise<string>;

    addCollection(
      _collection: string,
      _creator: string,
      _whitelistChecker: string,
      _tradingFee: BigNumberish,
      _creatorFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminAddress(overrides?: CallOverrides): Promise<string>;

    buyTokenUsingBNB(
      _collection: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokenUsingWBNB(
      _collection: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculatePriceAndFeesForCollection(
      collection: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netPrice: BigNumber;
        tradingFee: BigNumber;
        creatorFee: BigNumber;
      }
    >;

    canTokensBeListed(
      _collection: string,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    cancelAskOrder(
      _collection: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPendingRevenue(overrides?: CallOverrides): Promise<void>;

    closeCollectionForTradingAndListing(
      _collection: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createAskOrder(
      _collection: string,
      _tokenId: BigNumberish,
      _askPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maximumAskPrice(overrides?: CallOverrides): Promise<BigNumber>;

    minimumAskPrice(overrides?: CallOverrides): Promise<BigNumber>;

    modifyAskOrder(
      _collection: string,
      _tokenId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyCollection(
      _collection: string,
      _creator: string,
      _whitelistChecker: string,
      _tradingFee: BigNumberish,
      _creatorFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingRevenue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    recoverFungibleTokens(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverNonFungibleToken(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdminAndTreasuryAddresses(
      _adminAddress: string,
      _treasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    updateMinimumAndMaximumPrices(
      _minimumAskPrice: BigNumberish,
      _maximumAskPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    viewAsksByCollection(
      collection: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], AskStructOutput[], BigNumber] & {
        tokenIds: BigNumber[];
        askInfo: AskStructOutput[];
      }
    >;

    viewAsksByCollectionAndTokenIds(
      collection: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [boolean[], AskStructOutput[]] & {
        statuses: boolean[];
        askInfo: AskStructOutput[];
      }
    >;

    viewAsksByCollectionAndSeller(
      collection: string,
      seller: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], AskStructOutput[], BigNumber] & {
        tokenIds: BigNumber[];
        askInfo: AskStructOutput[];
      }
    >;

    viewCollections(
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], CollectionStructOutput[], BigNumber] & {
        collectionAddresses: string[];
        collectionDetails: CollectionStructOutput[];
      }
    >;
  };

  filters: {
    "AskCancel(address,address,uint256)"(
      collection?: string | null,
      seller?: string | null,
      tokenId?: BigNumberish | null
    ): AskCancelEventFilter;
    AskCancel(
      collection?: string | null,
      seller?: string | null,
      tokenId?: BigNumberish | null
    ): AskCancelEventFilter;

    "AskNew(address,address,uint256,uint256)"(
      collection?: string | null,
      seller?: string | null,
      tokenId?: BigNumberish | null,
      askPrice?: null
    ): AskNewEventFilter;
    AskNew(
      collection?: string | null,
      seller?: string | null,
      tokenId?: BigNumberish | null,
      askPrice?: null
    ): AskNewEventFilter;

    "AskUpdate(address,address,uint256,uint256)"(
      collection?: string | null,
      seller?: string | null,
      tokenId?: BigNumberish | null,
      askPrice?: null
    ): AskUpdateEventFilter;
    AskUpdate(
      collection?: string | null,
      seller?: string | null,
      tokenId?: BigNumberish | null,
      askPrice?: null
    ): AskUpdateEventFilter;

    "CollectionClose(address)"(
      collection?: string | null
    ): CollectionCloseEventFilter;
    CollectionClose(collection?: string | null): CollectionCloseEventFilter;

    "CollectionNew(address,address,address,uint256,uint256)"(
      collection?: string | null,
      creator?: string | null,
      whitelistChecker?: string | null,
      tradingFee?: null,
      creatorFee?: null
    ): CollectionNewEventFilter;
    CollectionNew(
      collection?: string | null,
      creator?: string | null,
      whitelistChecker?: string | null,
      tradingFee?: null,
      creatorFee?: null
    ): CollectionNewEventFilter;

    "CollectionUpdate(address,address,address,uint256,uint256)"(
      collection?: string | null,
      creator?: string | null,
      whitelistChecker?: string | null,
      tradingFee?: null,
      creatorFee?: null
    ): CollectionUpdateEventFilter;
    CollectionUpdate(
      collection?: string | null,
      creator?: string | null,
      whitelistChecker?: string | null,
      tradingFee?: null,
      creatorFee?: null
    ): CollectionUpdateEventFilter;

    "NewAdminAndTreasuryAddresses(address,address)"(
      admin?: string | null,
      treasury?: string | null
    ): NewAdminAndTreasuryAddressesEventFilter;
    NewAdminAndTreasuryAddresses(
      admin?: string | null,
      treasury?: string | null
    ): NewAdminAndTreasuryAddressesEventFilter;

    "NewMinimumAndMaximumAskPrices(uint256,uint256)"(
      minimumAskPrice?: null,
      maximumAskPrice?: null
    ): NewMinimumAndMaximumAskPricesEventFilter;
    NewMinimumAndMaximumAskPrices(
      minimumAskPrice?: null,
      maximumAskPrice?: null
    ): NewMinimumAndMaximumAskPricesEventFilter;

    "NonFungibleTokenRecovery(address,uint256)"(
      token?: string | null,
      tokenId?: BigNumberish | null
    ): NonFungibleTokenRecoveryEventFilter;
    NonFungibleTokenRecovery(
      token?: string | null,
      tokenId?: BigNumberish | null
    ): NonFungibleTokenRecoveryEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RevenueClaim(address,uint256)"(
      claimer?: string | null,
      amount?: null
    ): RevenueClaimEventFilter;
    RevenueClaim(
      claimer?: string | null,
      amount?: null
    ): RevenueClaimEventFilter;

    "TokenRecovery(address,uint256)"(
      token?: string | null,
      amount?: null
    ): TokenRecoveryEventFilter;
    TokenRecovery(
      token?: string | null,
      amount?: null
    ): TokenRecoveryEventFilter;

    "Trade(address,uint256,address,address,uint256,uint256,bool)"(
      collection?: string | null,
      tokenId?: BigNumberish | null,
      seller?: string | null,
      buyer?: null,
      askPrice?: null,
      netPrice?: null,
      withBNB?: null
    ): TradeEventFilter;
    Trade(
      collection?: string | null,
      tokenId?: BigNumberish | null,
      seller?: string | null,
      buyer?: null,
      askPrice?: null,
      netPrice?: null,
      withBNB?: null
    ): TradeEventFilter;
  };

  estimateGas: {
    TOTAL_MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    WBNB(overrides?: CallOverrides): Promise<BigNumber>;

    addCollection(
      _collection: string,
      _creator: string,
      _whitelistChecker: string,
      _tradingFee: BigNumberish,
      _creatorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    buyTokenUsingBNB(
      _collection: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyTokenUsingWBNB(
      _collection: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculatePriceAndFeesForCollection(
      collection: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canTokensBeListed(
      _collection: string,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAskOrder(
      _collection: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPendingRevenue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeCollectionForTradingAndListing(
      _collection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAskOrder(
      _collection: string,
      _tokenId: BigNumberish,
      _askPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maximumAskPrice(overrides?: CallOverrides): Promise<BigNumber>;

    minimumAskPrice(overrides?: CallOverrides): Promise<BigNumber>;

    modifyAskOrder(
      _collection: string,
      _tokenId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modifyCollection(
      _collection: string,
      _creator: string,
      _whitelistChecker: string,
      _tradingFee: BigNumberish,
      _creatorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRevenue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    recoverFungibleTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverNonFungibleToken(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdminAndTreasuryAddresses(
      _adminAddress: string,
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    updateMinimumAndMaximumPrices(
      _minimumAskPrice: BigNumberish,
      _maximumAskPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewAsksByCollection(
      collection: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewAsksByCollectionAndTokenIds(
      collection: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewAsksByCollectionAndSeller(
      collection: string,
      seller: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewCollections(
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TOTAL_MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WBNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCollection(
      _collection: string,
      _creator: string,
      _whitelistChecker: string,
      _tradingFee: BigNumberish,
      _creatorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyTokenUsingBNB(
      _collection: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyTokenUsingWBNB(
      _collection: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculatePriceAndFeesForCollection(
      collection: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canTokensBeListed(
      _collection: string,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAskOrder(
      _collection: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPendingRevenue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeCollectionForTradingAndListing(
      _collection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAskOrder(
      _collection: string,
      _tokenId: BigNumberish,
      _askPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maximumAskPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumAskPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modifyAskOrder(
      _collection: string,
      _tokenId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modifyCollection(
      _collection: string,
      _creator: string,
      _whitelistChecker: string,
      _tradingFee: BigNumberish,
      _creatorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRevenue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverFungibleTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverNonFungibleToken(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdminAndTreasuryAddresses(
      _adminAddress: string,
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMinimumAndMaximumPrices(
      _minimumAskPrice: BigNumberish,
      _maximumAskPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewAsksByCollection(
      collection: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewAsksByCollectionAndTokenIds(
      collection: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewAsksByCollectionAndSeller(
      collection: string,
      seller: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewCollections(
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
