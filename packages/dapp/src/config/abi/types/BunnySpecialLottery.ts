/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BunnySpecialLotteryInterface extends utils.Interface {
  functions: {
    "bunnyMintingStation()": FunctionFragment;
    "campaignIds(uint8)": FunctionFragment;
    "canClaimNft1(address,uint256)": FunctionFragment;
    "canClaimNft2(address,uint256,uint256)": FunctionFragment;
    "canClaimNft3(address)": FunctionFragment;
    "changeCampaignId(uint8,uint256)": FunctionFragment;
    "changeEndBlock(uint256)": FunctionFragment;
    "changeLotteryRounds(uint256,uint256)": FunctionFragment;
    "changeNumberPoints(uint8,uint256)": FunctionFragment;
    "changeTokenURI(uint8,string)": FunctionFragment;
    "endBlock()": FunctionFragment;
    "finalLotteryRound()": FunctionFragment;
    "hasClaimed(address,uint8)": FunctionFragment;
    "mintNFT(uint8,uint256,uint256)": FunctionFragment;
    "numberPoints(uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "pancakeProfile()": FunctionFragment;
    "pancakeSwapLottery()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startLotteryRound()": FunctionFragment;
    "tokenURIs(uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userWhitelistForNft3(address)": FunctionFragment;
    "whitelistAddresses(address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bunnyMintingStation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canClaimNft1",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canClaimNft2",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canClaimNft3",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCampaignId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeEndBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLotteryRounds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeNumberPoints",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalLotteryRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNFT",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pancakeSwapLottery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startLotteryRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURIs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userWhitelistForNft3",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAddresses",
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "bunnyMintingStation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canClaimNft1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canClaimNft2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canClaimNft3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCampaignId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLotteryRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeNumberPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalLotteryRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pancakeSwapLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startLotteryRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURIs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWhitelistForNft3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAddresses",
    data: BytesLike
  ): Result;

  events: {
    "BunnyMint(address,uint256,uint8)": EventFragment;
    "NewAddressWhitelisted(address[])": EventFragment;
    "NewCampaignId(uint8,uint256)": EventFragment;
    "NewEndBlock(uint256)": EventFragment;
    "NewLotteryRounds(uint256,uint256)": EventFragment;
    "NewNumberPoints(uint8,uint256)": EventFragment;
    "NewTokenURI(uint8,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BunnyMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAddressWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCampaignId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEndBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLotteryRounds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewNumberPoints"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTokenURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type BunnyMintEvent = TypedEvent<
  [string, BigNumber, number],
  { to: string; tokenId: BigNumber; bunnyId: number }
>;

export type BunnyMintEventFilter = TypedEventFilter<BunnyMintEvent>;

export type NewAddressWhitelistedEvent = TypedEvent<
  [string[]],
  { users: string[] }
>;

export type NewAddressWhitelistedEventFilter =
  TypedEventFilter<NewAddressWhitelistedEvent>;

export type NewCampaignIdEvent = TypedEvent<
  [number, BigNumber],
  { bunnyId: number; campaignId: BigNumber }
>;

export type NewCampaignIdEventFilter = TypedEventFilter<NewCampaignIdEvent>;

export type NewEndBlockEvent = TypedEvent<[BigNumber], { endBlock: BigNumber }>;

export type NewEndBlockEventFilter = TypedEventFilter<NewEndBlockEvent>;

export type NewLotteryRoundsEvent = TypedEvent<
  [BigNumber, BigNumber],
  { startLotteryRound: BigNumber; finalLotteryRound: BigNumber }
>;

export type NewLotteryRoundsEventFilter =
  TypedEventFilter<NewLotteryRoundsEvent>;

export type NewNumberPointsEvent = TypedEvent<
  [number, BigNumber],
  { bunnyId: number; numberPoints: BigNumber }
>;

export type NewNumberPointsEventFilter = TypedEventFilter<NewNumberPointsEvent>;

export type NewTokenURIEvent = TypedEvent<
  [number, string],
  { bunnyId: number; tokenURI: string }
>;

export type NewTokenURIEventFilter = TypedEventFilter<NewTokenURIEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BunnySpecialLottery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BunnySpecialLotteryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bunnyMintingStation(overrides?: CallOverrides): Promise<[string]>;

    campaignIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canClaimNft1(
      _userAddress: string,
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canClaimNft2(
      _userAddress: string,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canClaimNft3(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    changeCampaignId(
      _bunnyId: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeEndBlock(
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeLotteryRounds(
      _startLotteryRound: BigNumberish,
      _finalLotteryRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeNumberPoints(
      _bunnyId: BigNumberish,
      _numberPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeTokenURI(
      _bunnyId: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalLotteryRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasClaimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintNFT(
      _bunnyId: BigNumberish,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numberPoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pancakeProfile(overrides?: CallOverrides): Promise<[string]>;

    pancakeSwapLottery(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startLotteryRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenURIs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userWhitelistForNft3(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistAddresses(
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bunnyMintingStation(overrides?: CallOverrides): Promise<string>;

  campaignIds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canClaimNft1(
    _userAddress: string,
    _lotteryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canClaimNft2(
    _userAddress: string,
    _lotteryId: BigNumberish,
    _cursor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canClaimNft3(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  changeCampaignId(
    _bunnyId: BigNumberish,
    _campaignId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeEndBlock(
    _endBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeLotteryRounds(
    _startLotteryRound: BigNumberish,
    _finalLotteryRound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeNumberPoints(
    _bunnyId: BigNumberish,
    _numberPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeTokenURI(
    _bunnyId: BigNumberish,
    _tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  finalLotteryRound(overrides?: CallOverrides): Promise<BigNumber>;

  hasClaimed(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintNFT(
    _bunnyId: BigNumberish,
    _lotteryId: BigNumberish,
    _cursor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numberPoints(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pancakeProfile(overrides?: CallOverrides): Promise<string>;

  pancakeSwapLottery(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startLotteryRound(overrides?: CallOverrides): Promise<BigNumber>;

  tokenURIs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userWhitelistForNft3(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistAddresses(
    _users: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bunnyMintingStation(overrides?: CallOverrides): Promise<string>;

    campaignIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canClaimNft1(
      _userAddress: string,
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canClaimNft2(
      _userAddress: string,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canClaimNft3(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeCampaignId(
      _bunnyId: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeEndBlock(
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeLotteryRounds(
      _startLotteryRound: BigNumberish,
      _finalLotteryRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeNumberPoints(
      _bunnyId: BigNumberish,
      _numberPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTokenURI(
      _bunnyId: BigNumberish,
      _tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    finalLotteryRound(overrides?: CallOverrides): Promise<BigNumber>;

    hasClaimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintNFT(
      _bunnyId: BigNumberish,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    numberPoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pancakeProfile(overrides?: CallOverrides): Promise<string>;

    pancakeSwapLottery(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    startLotteryRound(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURIs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userWhitelistForNft3(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistAddresses(
      _users: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BunnyMint(address,uint256,uint8)"(
      to?: string | null,
      tokenId?: BigNumberish | null,
      bunnyId?: BigNumberish | null
    ): BunnyMintEventFilter;
    BunnyMint(
      to?: string | null,
      tokenId?: BigNumberish | null,
      bunnyId?: BigNumberish | null
    ): BunnyMintEventFilter;

    "NewAddressWhitelisted(address[])"(
      users?: null
    ): NewAddressWhitelistedEventFilter;
    NewAddressWhitelisted(users?: null): NewAddressWhitelistedEventFilter;

    "NewCampaignId(uint8,uint256)"(
      bunnyId?: null,
      campaignId?: null
    ): NewCampaignIdEventFilter;
    NewCampaignId(bunnyId?: null, campaignId?: null): NewCampaignIdEventFilter;

    "NewEndBlock(uint256)"(endBlock?: null): NewEndBlockEventFilter;
    NewEndBlock(endBlock?: null): NewEndBlockEventFilter;

    "NewLotteryRounds(uint256,uint256)"(
      startLotteryRound?: null,
      finalLotteryRound?: null
    ): NewLotteryRoundsEventFilter;
    NewLotteryRounds(
      startLotteryRound?: null,
      finalLotteryRound?: null
    ): NewLotteryRoundsEventFilter;

    "NewNumberPoints(uint8,uint256)"(
      bunnyId?: null,
      numberPoints?: null
    ): NewNumberPointsEventFilter;
    NewNumberPoints(
      bunnyId?: null,
      numberPoints?: null
    ): NewNumberPointsEventFilter;

    "NewTokenURI(uint8,string)"(
      bunnyId?: null,
      tokenURI?: null
    ): NewTokenURIEventFilter;
    NewTokenURI(bunnyId?: null, tokenURI?: null): NewTokenURIEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    bunnyMintingStation(overrides?: CallOverrides): Promise<BigNumber>;

    campaignIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canClaimNft1(
      _userAddress: string,
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canClaimNft2(
      _userAddress: string,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canClaimNft3(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeCampaignId(
      _bunnyId: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeEndBlock(
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeLotteryRounds(
      _startLotteryRound: BigNumberish,
      _finalLotteryRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeNumberPoints(
      _bunnyId: BigNumberish,
      _numberPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeTokenURI(
      _bunnyId: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    finalLotteryRound(overrides?: CallOverrides): Promise<BigNumber>;

    hasClaimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintNFT(
      _bunnyId: BigNumberish,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numberPoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeProfile(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeSwapLottery(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startLotteryRound(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURIs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userWhitelistForNft3(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistAddresses(
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bunnyMintingStation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canClaimNft1(
      _userAddress: string,
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canClaimNft2(
      _userAddress: string,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canClaimNft3(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeCampaignId(
      _bunnyId: BigNumberish,
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeEndBlock(
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeLotteryRounds(
      _startLotteryRound: BigNumberish,
      _finalLotteryRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeNumberPoints(
      _bunnyId: BigNumberish,
      _numberPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeTokenURI(
      _bunnyId: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalLotteryRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasClaimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintNFT(
      _bunnyId: BigNumberish,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numberPoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeProfile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeSwapLottery(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startLotteryRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURIs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userWhitelistForNft3(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistAddresses(
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
