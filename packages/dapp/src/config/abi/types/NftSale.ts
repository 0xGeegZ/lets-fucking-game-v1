/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface NftSaleInterface extends utils.Interface {
  functions: {
    "buyTickets(uint256)": FunctionFragment;
    "buyTicketsInPreSaleForGen0(uint256)": FunctionFragment;
    "cakeToken()": FunctionFragment;
    "calculateTokenId(uint256)": FunctionFragment;
    "canClaimForGen0(address)": FunctionFragment;
    "changeOwnershipPancakeSquad(address)": FunctionFragment;
    "claim()": FunctionFragment;
    "currentStatus()": FunctionFragment;
    "drawRandomness()": FunctionFragment;
    "fee()": FunctionFragment;
    "getReserveTickets(uint256)": FunctionFragment;
    "keyHash()": FunctionFragment;
    "latestRequestId()": FunctionFragment;
    "lock()": FunctionFragment;
    "maxPerAddress()": FunctionFragment;
    "maxPerTransaction()": FunctionFragment;
    "maxReserveSupply()": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "mint(uint256[])": FunctionFragment;
    "numberTicketsForGen0(address)": FunctionFragment;
    "numberTicketsUsedForGen0(address)": FunctionFragment;
    "operator()": FunctionFragment;
    "owner()": FunctionFragment;
    "pancakeProfile()": FunctionFragment;
    "pancakeSquad()": FunctionFragment;
    "pricePerTicket()": FunctionFragment;
    "randomOffsetNumber()": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "recoverToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setFeeAndKeyHash(uint256,bytes32)": FunctionFragment;
    "setOperatorAddress(address)": FunctionFragment;
    "setSaleProperties(uint256,uint256,uint256)": FunctionFragment;
    "setTicketPrice(uint256)": FunctionFragment;
    "startTimestamp()": FunctionFragment;
    "ticketsOfUserBySize(address,uint256,uint256)": FunctionFragment;
    "totalTicketsDistributed()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unwhitelistAddresses(address[])": FunctionFragment;
    "updateSaleStatus(uint8)": FunctionFragment;
    "viewNumberTicketsOfUser(address)": FunctionFragment;
    "whitelistAddresses(address[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyTickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicketsInPreSaleForGen0",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cakeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canClaimForGen0",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwnershipPancakeSquad",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawRandomness",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReserveTickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "keyHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "latestRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxPerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPerTransaction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxReserveSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "numberTicketsForGen0",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "numberTicketsUsedForGen0",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pancakeSquad",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerTicket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomOffsetNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeAndKeyHash",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleProperties",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTicketPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketsOfUserBySize",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTicketsDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unwhitelistAddresses",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSaleStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewNumberTicketsOfUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAddresses",
    values: [string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyTicketsInPreSaleForGen0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cakeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canClaimForGen0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwnershipPancakeSquad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserveTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keyHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxReserveSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberTicketsForGen0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberTicketsUsedForGen0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pancakeSquad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomOffsetNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAndKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTicketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketsOfUserBySize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTicketsDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwhitelistAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSaleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewNumberTicketsOfUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAddresses",
    data: BytesLike
  ): Result;

  events: {
    "AddressesUnwhitelisted(address[])": EventFragment;
    "AddressesWhitelisted(address[],uint256[])": EventFragment;
    "Claim(uint256)": EventFragment;
    "Mint(address,uint256)": EventFragment;
    "NewOperator(address)": EventFragment;
    "NewPricePerTicket(uint256)": EventFragment;
    "NewSaleProperties(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RandomnessRequest(bytes32,uint8)": EventFragment;
    "SaleStatusUpdate(uint8)": EventFragment;
    "TicketsDistributed(address,uint256)": EventFragment;
    "TokenRecovery(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressesUnwhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressesWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPricePerTicket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSaleProperties"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RandomnessRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleStatusUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRecovery"): EventFragment;
}

export type AddressesUnwhitelistedEvent = TypedEvent<
  [string[]],
  { users: string[] }
>;

export type AddressesUnwhitelistedEventFilter =
  TypedEventFilter<AddressesUnwhitelistedEvent>;

export type AddressesWhitelistedEvent = TypedEvent<
  [string[], BigNumber[]],
  { users: string[]; numberTickets: BigNumber[] }
>;

export type AddressesWhitelistedEventFilter =
  TypedEventFilter<AddressesWhitelistedEvent>;

export type ClaimEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type MintEvent = TypedEvent<
  [string, BigNumber],
  { user: string; numberTokens: BigNumber }
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export type NewOperatorEvent = TypedEvent<[string], { operator: string }>;

export type NewOperatorEventFilter = TypedEventFilter<NewOperatorEvent>;

export type NewPricePerTicketEvent = TypedEvent<
  [BigNumber],
  { pricePerTicket: BigNumber }
>;

export type NewPricePerTicketEventFilter =
  TypedEventFilter<NewPricePerTicketEvent>;

export type NewSalePropertiesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    startTimestamp: BigNumber;
    maxPerAddress: BigNumber;
    maxPerTransaction: BigNumber;
  }
>;

export type NewSalePropertiesEventFilter =
  TypedEventFilter<NewSalePropertiesEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RandomnessRequestEvent = TypedEvent<
  [string, number],
  { latestRequestId: string; currentStatus: number }
>;

export type RandomnessRequestEventFilter =
  TypedEventFilter<RandomnessRequestEvent>;

export type SaleStatusUpdateEvent = TypedEvent<[number], { newStatus: number }>;

export type SaleStatusUpdateEventFilter =
  TypedEventFilter<SaleStatusUpdateEvent>;

export type TicketsDistributedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; numberTickets: BigNumber }
>;

export type TicketsDistributedEventFilter =
  TypedEventFilter<TicketsDistributedEvent>;

export type TokenRecoveryEvent = TypedEvent<
  [string, BigNumber],
  { token: string; amount: BigNumber }
>;

export type TokenRecoveryEventFilter = TypedEventFilter<TokenRecoveryEvent>;

export interface NftSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NftSaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyTickets(
      _numberTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyTicketsInPreSaleForGen0(
      _numberTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cakeToken(overrides?: CallOverrides): Promise<[string]>;

    calculateTokenId(
      _ticketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canClaimForGen0(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    changeOwnershipPancakeSquad(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentStatus(overrides?: CallOverrides): Promise<[number]>;

    drawRandomness(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReserveTickets(
      _numberTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keyHash(overrides?: CallOverrides): Promise<[string]>;

    latestRequestId(overrides?: CallOverrides): Promise<[string]>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxPerAddress(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPerTransaction(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxReserveSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _ticketIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numberTicketsForGen0(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numberTicketsUsedForGen0(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pancakeProfile(overrides?: CallOverrides): Promise<[string]>;

    pancakeSquad(overrides?: CallOverrides): Promise<[string]>;

    pricePerTicket(overrides?: CallOverrides): Promise<[BigNumber]>;

    randomOffsetNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeAndKeyHash(
      _fee: BigNumberish,
      _keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperatorAddress(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleProperties(
      _startTimestamp: BigNumberish,
      _maxPerAddress: BigNumberish,
      _maxPerTransaction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTicketPrice(
      _pricePerTicket: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    ticketsOfUserBySize(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber]>;

    totalTicketsDistributed(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwhitelistAddresses(
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSaleStatus(
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewNumberTicketsOfUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelistAddresses(
      _users: string[],
      _numberTickets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyTickets(
    _numberTickets: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyTicketsInPreSaleForGen0(
    _numberTickets: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cakeToken(overrides?: CallOverrides): Promise<string>;

  calculateTokenId(
    _ticketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canClaimForGen0(user: string, overrides?: CallOverrides): Promise<boolean>;

  changeOwnershipPancakeSquad(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentStatus(overrides?: CallOverrides): Promise<number>;

  drawRandomness(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  getReserveTickets(
    _numberTickets: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keyHash(overrides?: CallOverrides): Promise<string>;

  latestRequestId(overrides?: CallOverrides): Promise<string>;

  lock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

  maxPerTransaction(overrides?: CallOverrides): Promise<BigNumber>;

  maxReserveSupply(overrides?: CallOverrides): Promise<BigNumber>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _ticketIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numberTicketsForGen0(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numberTicketsUsedForGen0(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  operator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pancakeProfile(overrides?: CallOverrides): Promise<string>;

  pancakeSquad(overrides?: CallOverrides): Promise<string>;

  pricePerTicket(overrides?: CallOverrides): Promise<BigNumber>;

  randomOffsetNumber(overrides?: CallOverrides): Promise<BigNumber>;

  rawFulfillRandomness(
    requestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeAndKeyHash(
    _fee: BigNumberish,
    _keyHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperatorAddress(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleProperties(
    _startTimestamp: BigNumberish,
    _maxPerAddress: BigNumberish,
    _maxPerTransaction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTicketPrice(
    _pricePerTicket: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  ticketsOfUserBySize(
    user: string,
    cursor: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber]>;

  totalTicketsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwhitelistAddresses(
    _users: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSaleStatus(
    _status: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewNumberTicketsOfUser(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelistAddresses(
    _users: string[],
    _numberTickets: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyTickets(
      _numberTickets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTicketsInPreSaleForGen0(
      _numberTickets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cakeToken(overrides?: CallOverrides): Promise<string>;

    calculateTokenId(
      _ticketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canClaimForGen0(user: string, overrides?: CallOverrides): Promise<boolean>;

    changeOwnershipPancakeSquad(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    currentStatus(overrides?: CallOverrides): Promise<number>;

    drawRandomness(overrides?: CallOverrides): Promise<void>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveTickets(
      _numberTickets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    keyHash(overrides?: CallOverrides): Promise<string>;

    latestRequestId(overrides?: CallOverrides): Promise<string>;

    lock(overrides?: CallOverrides): Promise<void>;

    maxPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxPerTransaction(overrides?: CallOverrides): Promise<BigNumber>;

    maxReserveSupply(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mint(_ticketIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    numberTicketsForGen0(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberTicketsUsedForGen0(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pancakeProfile(overrides?: CallOverrides): Promise<string>;

    pancakeSquad(overrides?: CallOverrides): Promise<string>;

    pricePerTicket(overrides?: CallOverrides): Promise<BigNumber>;

    randomOffsetNumber(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverToken(_token: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBaseURI(_uri: string, overrides?: CallOverrides): Promise<void>;

    setFeeAndKeyHash(
      _fee: BigNumberish,
      _keyHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperatorAddress(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSaleProperties(
      _startTimestamp: BigNumberish,
      _maxPerAddress: BigNumberish,
      _maxPerTransaction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTicketPrice(
      _pricePerTicket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    ticketsOfUserBySize(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber]>;

    totalTicketsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unwhitelistAddresses(
      _users: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateSaleStatus(
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    viewNumberTicketsOfUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistAddresses(
      _users: string[],
      _numberTickets: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressesUnwhitelisted(address[])"(
      users?: null
    ): AddressesUnwhitelistedEventFilter;
    AddressesUnwhitelisted(users?: null): AddressesUnwhitelistedEventFilter;

    "AddressesWhitelisted(address[],uint256[])"(
      users?: null,
      numberTickets?: null
    ): AddressesWhitelistedEventFilter;
    AddressesWhitelisted(
      users?: null,
      numberTickets?: null
    ): AddressesWhitelistedEventFilter;

    "Claim(uint256)"(amount?: null): ClaimEventFilter;
    Claim(amount?: null): ClaimEventFilter;

    "Mint(address,uint256)"(
      user?: string | null,
      numberTokens?: null
    ): MintEventFilter;
    Mint(user?: string | null, numberTokens?: null): MintEventFilter;

    "NewOperator(address)"(operator?: string | null): NewOperatorEventFilter;
    NewOperator(operator?: string | null): NewOperatorEventFilter;

    "NewPricePerTicket(uint256)"(
      pricePerTicket?: null
    ): NewPricePerTicketEventFilter;
    NewPricePerTicket(pricePerTicket?: null): NewPricePerTicketEventFilter;

    "NewSaleProperties(uint256,uint256,uint256)"(
      startTimestamp?: null,
      maxPerAddress?: null,
      maxPerTransaction?: null
    ): NewSalePropertiesEventFilter;
    NewSaleProperties(
      startTimestamp?: null,
      maxPerAddress?: null,
      maxPerTransaction?: null
    ): NewSalePropertiesEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RandomnessRequest(bytes32,uint8)"(
      latestRequestId?: null,
      currentStatus?: null
    ): RandomnessRequestEventFilter;
    RandomnessRequest(
      latestRequestId?: null,
      currentStatus?: null
    ): RandomnessRequestEventFilter;

    "SaleStatusUpdate(uint8)"(newStatus?: null): SaleStatusUpdateEventFilter;
    SaleStatusUpdate(newStatus?: null): SaleStatusUpdateEventFilter;

    "TicketsDistributed(address,uint256)"(
      user?: string | null,
      numberTickets?: null
    ): TicketsDistributedEventFilter;
    TicketsDistributed(
      user?: string | null,
      numberTickets?: null
    ): TicketsDistributedEventFilter;

    "TokenRecovery(address,uint256)"(
      token?: string | null,
      amount?: null
    ): TokenRecoveryEventFilter;
    TokenRecovery(
      token?: string | null,
      amount?: null
    ): TokenRecoveryEventFilter;
  };

  estimateGas: {
    buyTickets(
      _numberTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyTicketsInPreSaleForGen0(
      _numberTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cakeToken(overrides?: CallOverrides): Promise<BigNumber>;

    calculateTokenId(
      _ticketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canClaimForGen0(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeOwnershipPancakeSquad(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentStatus(overrides?: CallOverrides): Promise<BigNumber>;

    drawRandomness(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveTickets(
      _numberTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keyHash(overrides?: CallOverrides): Promise<BigNumber>;

    latestRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxPerTransaction(overrides?: CallOverrides): Promise<BigNumber>;

    maxReserveSupply(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _ticketIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numberTicketsForGen0(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberTicketsUsedForGen0(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeProfile(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeSquad(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerTicket(overrides?: CallOverrides): Promise<BigNumber>;

    randomOffsetNumber(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeAndKeyHash(
      _fee: BigNumberish,
      _keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperatorAddress(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleProperties(
      _startTimestamp: BigNumberish,
      _maxPerAddress: BigNumberish,
      _maxPerTransaction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTicketPrice(
      _pricePerTicket: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    ticketsOfUserBySize(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTicketsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwhitelistAddresses(
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSaleStatus(
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewNumberTicketsOfUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistAddresses(
      _users: string[],
      _numberTickets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTickets(
      _numberTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyTicketsInPreSaleForGen0(
      _numberTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateTokenId(
      _ticketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canClaimForGen0(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeOwnershipPancakeSquad(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drawRandomness(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveTickets(
      _numberTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxPerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPerTransaction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxReserveSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _ticketIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numberTicketsForGen0(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberTicketsUsedForGen0(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeProfile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeSquad(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerTicket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomOffsetNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAndKeyHash(
      _fee: BigNumberish,
      _keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperatorAddress(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleProperties(
      _startTimestamp: BigNumberish,
      _maxPerAddress: BigNumberish,
      _maxPerTransaction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTicketPrice(
      _pricePerTicket: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketsOfUserBySize(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTicketsDistributed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwhitelistAddresses(
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSaleStatus(
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewNumberTicketsOfUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistAddresses(
      _users: string[],
      _numberTickets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
