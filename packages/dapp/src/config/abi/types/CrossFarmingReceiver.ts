/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CrossFarmingReceiverInterface extends utils.Interface {
  functions: {
    "BNB_CHANGE()": FunctionFragment;
    "CAKE()": FunctionFragment;
    "CROSS_FARMING_SENDER()": FunctionFragment;
    "MASTER_CHEF_V2()": FunctionFragment;
    "SENDER_CHAIN_ID()": FunctionFragment;
    "bnbChangeReceived(address)": FunctionFragment;
    "cProxy(address)": FunctionFragment;
    "claimFee(uint256)": FunctionFragment;
    "drainToken(address,uint256)": FunctionFragment;
    "executeMessage(address,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransferRefund(address,uint256,bytes,address)": FunctionFragment;
    "fallbackDeposit(address,uint256,uint64)": FunctionFragment;
    "fallbackWithdraw(address,uint256,uint256,uint64)": FunctionFragment;
    "messageBus()": FunctionFragment;
    "operator()": FunctionFragment;
    "owner()": FunctionFragment;
    "setBnbChange(uint256)": FunctionFragment;
    "setMessageBus(address)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uProxy(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BNB_CHANGE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CAKE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CROSS_FARMING_SENDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MASTER_CHEF_V2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SENDER_CHAIN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bnbChangeReceived",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "cProxy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drainToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessage",
    values: [string, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransfer",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransferFallback",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransferRefund",
    values: [string, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fallbackDeposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fallbackWithdraw",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messageBus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBnbChange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessageBus",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uProxy", values: [string]): string;

  decodeFunctionResult(functionFragment: "BNB_CHANGE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CAKE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CROSS_FARMING_SENDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MASTER_CHEF_V2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SENDER_CHAIN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bnbChangeReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drainToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransferFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransferRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fallbackDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fallbackWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messageBus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBnbChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMessageBus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uProxy", data: BytesLike): Result;

  events: {
    "BnbChangeUpdated(uint256)": EventFragment;
    "FallbackDeposit(address,uint256,uint64)": EventFragment;
    "FallbackWithdraw(address,uint256,uint256,uint64)": EventFragment;
    "FarmingMessageReceived(address,uint64,uint64,uint8,address,uint256,uint256)": EventFragment;
    "FeeClaimed(uint256,bool)": EventFragment;
    "MessageBusUpdated(address)": EventFragment;
    "OperatorUpdated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProxyCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BnbChangeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FallbackDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FallbackWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmingMessageReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageBusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyCreated"): EventFragment;
}

export type BnbChangeUpdatedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type BnbChangeUpdatedEventFilter =
  TypedEventFilter<BnbChangeUpdatedEvent>;

export type FallbackDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; pid: BigNumber; nonce: BigNumber }
>;

export type FallbackDepositEventFilter = TypedEventFilter<FallbackDepositEvent>;

export type FallbackWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { user: string; pid: BigNumber; amount: BigNumber; nonce: BigNumber }
>;

export type FallbackWithdrawEventFilter =
  TypedEventFilter<FallbackWithdrawEvent>;

export type FarmingMessageReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, string, BigNumber, BigNumber],
  {
    sender: string;
    srcChainId: BigNumber;
    nonce: BigNumber;
    msgType: number;
    acount: string;
    pid: BigNumber;
    amount: BigNumber;
  }
>;

export type FarmingMessageReceivedEventFilter =
  TypedEventFilter<FarmingMessageReceivedEvent>;

export type FeeClaimedEvent = TypedEvent<
  [BigNumber, boolean],
  { amount: BigNumber; success: boolean }
>;

export type FeeClaimedEventFilter = TypedEventFilter<FeeClaimedEvent>;

export type MessageBusUpdatedEvent = TypedEvent<
  [string],
  { messageBus: string }
>;

export type MessageBusUpdatedEventFilter =
  TypedEventFilter<MessageBusUpdatedEvent>;

export type OperatorUpdatedEvent = TypedEvent<
  [string, string],
  { newOperator: string; oldOperator: string }
>;

export type OperatorUpdatedEventFilter = TypedEventFilter<OperatorUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ProxyCreatedEvent = TypedEvent<
  [string, string],
  { sender: string; proxy: string }
>;

export type ProxyCreatedEventFilter = TypedEventFilter<ProxyCreatedEvent>;

export interface CrossFarmingReceiver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrossFarmingReceiverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BNB_CHANGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    CAKE(overrides?: CallOverrides): Promise<[string]>;

    CROSS_FARMING_SENDER(overrides?: CallOverrides): Promise<[string]>;

    MASTER_CHEF_V2(overrides?: CallOverrides): Promise<[string]>;

    SENDER_CHAIN_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    bnbChangeReceived(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cProxy(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    claimFee(
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    drainToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessage(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fallbackDeposit(
      _user: string,
      _pid: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fallbackWithdraw(
      _user: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    messageBus(overrides?: CallOverrides): Promise<[string]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setBnbChange(
      _change: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMessageBus(
      _messageBus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uProxy(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  BNB_CHANGE(overrides?: CallOverrides): Promise<BigNumber>;

  CAKE(overrides?: CallOverrides): Promise<string>;

  CROSS_FARMING_SENDER(overrides?: CallOverrides): Promise<string>;

  MASTER_CHEF_V2(overrides?: CallOverrides): Promise<string>;

  SENDER_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

  bnbChangeReceived(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  cProxy(arg0: string, overrides?: CallOverrides): Promise<string>;

  claimFee(
    _gas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  drainToken(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessage(
    _sender: string,
    _srcChainId: BigNumberish,
    _message: BytesLike,
    arg3: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransfer(
    _sender: string,
    _token: string,
    _amount: BigNumberish,
    _srcChainId: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransferFallback(
    _sender: string,
    _token: string,
    _amount: BigNumberish,
    _srcChainId: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransferRefund(
    _token: string,
    _amount: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fallbackDeposit(
    _user: string,
    _pid: BigNumberish,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fallbackWithdraw(
    _user: string,
    _pid: BigNumberish,
    _amount: BigNumberish,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  messageBus(overrides?: CallOverrides): Promise<string>;

  operator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setBnbChange(
    _change: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMessageBus(
    _messageBus: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uProxy(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BNB_CHANGE(overrides?: CallOverrides): Promise<BigNumber>;

    CAKE(overrides?: CallOverrides): Promise<string>;

    CROSS_FARMING_SENDER(overrides?: CallOverrides): Promise<string>;

    MASTER_CHEF_V2(overrides?: CallOverrides): Promise<string>;

    SENDER_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    bnbChangeReceived(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cProxy(arg0: string, overrides?: CallOverrides): Promise<string>;

    claimFee(_gas: BigNumberish, overrides?: CallOverrides): Promise<void>;

    drainToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeMessage(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<number>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides
    ): Promise<number>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides
    ): Promise<number>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides
    ): Promise<number>;

    fallbackDeposit(
      _user: string,
      _pid: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fallbackWithdraw(
      _user: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    messageBus(overrides?: CallOverrides): Promise<string>;

    operator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setBnbChange(
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMessageBus(
      _messageBus: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(_operator: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uProxy(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BnbChangeUpdated(uint256)"(amount?: null): BnbChangeUpdatedEventFilter;
    BnbChangeUpdated(amount?: null): BnbChangeUpdatedEventFilter;

    "FallbackDeposit(address,uint256,uint64)"(
      user?: string | null,
      pid?: null,
      nonce?: null
    ): FallbackDepositEventFilter;
    FallbackDeposit(
      user?: string | null,
      pid?: null,
      nonce?: null
    ): FallbackDepositEventFilter;

    "FallbackWithdraw(address,uint256,uint256,uint64)"(
      user?: string | null,
      pid?: null,
      amount?: null,
      nonce?: null
    ): FallbackWithdrawEventFilter;
    FallbackWithdraw(
      user?: string | null,
      pid?: null,
      amount?: null,
      nonce?: null
    ): FallbackWithdrawEventFilter;

    "FarmingMessageReceived(address,uint64,uint64,uint8,address,uint256,uint256)"(
      sender?: null,
      srcChainId?: null,
      nonce?: null,
      msgType?: null,
      acount?: null,
      pid?: null,
      amount?: null
    ): FarmingMessageReceivedEventFilter;
    FarmingMessageReceived(
      sender?: null,
      srcChainId?: null,
      nonce?: null,
      msgType?: null,
      acount?: null,
      pid?: null,
      amount?: null
    ): FarmingMessageReceivedEventFilter;

    "FeeClaimed(uint256,bool)"(
      amount?: null,
      success?: null
    ): FeeClaimedEventFilter;
    FeeClaimed(amount?: null, success?: null): FeeClaimedEventFilter;

    "MessageBusUpdated(address)"(
      messageBus?: null
    ): MessageBusUpdatedEventFilter;
    MessageBusUpdated(messageBus?: null): MessageBusUpdatedEventFilter;

    "OperatorUpdated(address,address)"(
      newOperator?: string | null,
      oldOperator?: string | null
    ): OperatorUpdatedEventFilter;
    OperatorUpdated(
      newOperator?: string | null,
      oldOperator?: string | null
    ): OperatorUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProxyCreated(address,address)"(
      sender?: string | null,
      proxy?: null
    ): ProxyCreatedEventFilter;
    ProxyCreated(sender?: string | null, proxy?: null): ProxyCreatedEventFilter;
  };

  estimateGas: {
    BNB_CHANGE(overrides?: CallOverrides): Promise<BigNumber>;

    CAKE(overrides?: CallOverrides): Promise<BigNumber>;

    CROSS_FARMING_SENDER(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_CHEF_V2(overrides?: CallOverrides): Promise<BigNumber>;

    SENDER_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    bnbChangeReceived(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cProxy(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimFee(
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    drainToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessage(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fallbackDeposit(
      _user: string,
      _pid: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fallbackWithdraw(
      _user: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    messageBus(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setBnbChange(
      _change: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMessageBus(
      _messageBus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uProxy(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BNB_CHANGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CAKE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CROSS_FARMING_SENDER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MASTER_CHEF_V2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SENDER_CHAIN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bnbChangeReceived(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cProxy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimFee(
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    drainToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessage(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fallbackDeposit(
      _user: string,
      _pid: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fallbackWithdraw(
      _user: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    messageBus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBnbChange(
      _change: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMessageBus(
      _messageBus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uProxy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
