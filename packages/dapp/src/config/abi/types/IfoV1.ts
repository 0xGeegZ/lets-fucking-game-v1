/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IfoV1Interface extends utils.Interface {
  functions: {
    "addressList(uint256)": FunctionFragment;
    "adminAddress()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "endBlock()": FunctionFragment;
    "finalWithdraw(uint256,uint256)": FunctionFragment;
    "getOfferingAmount(address)": FunctionFragment;
    "getRefundingAmount(address)": FunctionFragment;
    "getUserAllocation(address)": FunctionFragment;
    "harvest()": FunctionFragment;
    "hasHarvest(address)": FunctionFragment;
    "lpToken()": FunctionFragment;
    "offeringAmount()": FunctionFragment;
    "offeringToken()": FunctionFragment;
    "raisingAmount()": FunctionFragment;
    "startBlock()": FunctionFragment;
    "totalAmount()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalWithdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferingAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRefundingAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAllocation",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(functionFragment: "hasHarvest", values: [string]): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "offeringAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offeringToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raisingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefundingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasHarvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offeringAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offeringToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raisingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "Harvest(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type HarvestEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; offeringAmount: BigNumber; excessAmount: BigNumber }
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface IfoV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IfoV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalWithdraw(
      _lpAmount: BigNumberish,
      _offerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOfferingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRefundingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserAllocation(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasHarvest(_user: string, overrides?: CallOverrides): Promise<[boolean]>;

    lpToken(overrides?: CallOverrides): Promise<[string]>;

    offeringAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    offeringToken(overrides?: CallOverrides): Promise<[string]>;

    raisingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { amount: BigNumber; claimed: boolean }>;
  };

  addressList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  adminAddress(overrides?: CallOverrides): Promise<string>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  finalWithdraw(
    _lpAmount: BigNumberish,
    _offerAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOfferingAmount(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRefundingAmount(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserAllocation(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasHarvest(_user: string, overrides?: CallOverrides): Promise<boolean>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  offeringAmount(overrides?: CallOverrides): Promise<BigNumber>;

  offeringToken(overrides?: CallOverrides): Promise<string>;

  raisingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { amount: BigNumber; claimed: boolean }>;

  callStatic: {
    addressList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    adminAddress(overrides?: CallOverrides): Promise<string>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    finalWithdraw(
      _lpAmount: BigNumberish,
      _offerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getOfferingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRefundingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAllocation(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(overrides?: CallOverrides): Promise<void>;

    hasHarvest(_user: string, overrides?: CallOverrides): Promise<boolean>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    offeringAmount(overrides?: CallOverrides): Promise<BigNumber>;

    offeringToken(overrides?: CallOverrides): Promise<string>;

    raisingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { amount: BigNumber; claimed: boolean }>;
  };

  filters: {
    "Deposit(address,uint256)"(
      user?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(user?: string | null, amount?: null): DepositEventFilter;

    "Harvest(address,uint256,uint256)"(
      user?: string | null,
      offeringAmount?: null,
      excessAmount?: null
    ): HarvestEventFilter;
    Harvest(
      user?: string | null,
      offeringAmount?: null,
      excessAmount?: null
    ): HarvestEventFilter;
  };

  estimateGas: {
    addressList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    finalWithdraw(
      _lpAmount: BigNumberish,
      _offerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOfferingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRefundingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAllocation(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasHarvest(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    offeringAmount(overrides?: CallOverrides): Promise<BigNumber>;

    offeringToken(overrides?: CallOverrides): Promise<BigNumber>;

    raisingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalWithdraw(
      _lpAmount: BigNumberish,
      _offerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOfferingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRefundingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAllocation(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasHarvest(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offeringAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offeringToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raisingAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
