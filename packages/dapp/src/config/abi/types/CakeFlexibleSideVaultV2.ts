/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CakeFlexibleSideVaultV2Interface extends utils.Interface {
  functions: {
    "MAX_PERFORMANCE_FEE()": FunctionFragment;
    "MAX_WITHDRAW_AMOUNT_BOOSTER()": FunctionFragment;
    "MAX_WITHDRAW_FEE()": FunctionFragment;
    "MAX_WITHDRAW_FEE_PERIOD()": FunctionFragment;
    "MIN_DEPOSIT_AMOUNT()": FunctionFragment;
    "MIN_WITHDRAW_AMOUNT()": FunctionFragment;
    "MIN_WITHDRAW_AMOUNT_BOOSTER()": FunctionFragment;
    "admin()": FunctionFragment;
    "available()": FunctionFragment;
    "balanceOf()": FunctionFragment;
    "cakePool()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "getPricePerFullShare()": FunctionFragment;
    "inCaseTokensGetStuck(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "performanceFee()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setPerformanceFee(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setWithdrawAmountBooster(uint256)": FunctionFragment;
    "setWithdrawFee(uint256)": FunctionFragment;
    "setWithdrawFeePeriod(uint256)": FunctionFragment;
    "staking()": FunctionFragment;
    "token()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "unpause()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
    "withdrawAmountBooster()": FunctionFragment;
    "withdrawFee()": FunctionFragment;
    "withdrawFeePeriod()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_PERFORMANCE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WITHDRAW_AMOUNT_BOOSTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WITHDRAW_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WITHDRAW_FEE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DEPOSIT_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_WITHDRAW_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_WITHDRAW_AMOUNT_BOOSTER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "available", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values?: undefined): string;
  encodeFunctionData(functionFragment: "cakePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPricePerFullShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inCaseTokensGetStuck",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWithdrawAmountBooster",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFeePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAmountBooster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeePeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PERFORMANCE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WITHDRAW_AMOUNT_BOOSTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WITHDRAW_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WITHDRAW_FEE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DEPOSIT_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_WITHDRAW_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_WITHDRAW_AMOUNT_BOOSTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cakePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricePerFullShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inCaseTokensGetStuck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawAmountBooster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFeePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAmountBooster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeePeriod",
    data: BytesLike
  ): Result;

  events: {
    "ChargePerformanceFee(address,uint256,uint256)": EventFragment;
    "ChargeWithdrawFee(address,uint256)": EventFragment;
    "DepositCake(address,uint256,uint256,uint256)": EventFragment;
    "NewAdmin(address)": EventFragment;
    "NewPerformanceFee(uint256)": EventFragment;
    "NewTreasury(address)": EventFragment;
    "NewWithdrawAmountBooster(uint256)": EventFragment;
    "NewWithdrawFee(uint256)": EventFragment;
    "NewWithdrawFeePeriod(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pause()": EventFragment;
    "Paused(address)": EventFragment;
    "Unpause()": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawShares(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChargePerformanceFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChargeWithdrawFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositCake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPerformanceFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTreasury"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewWithdrawAmountBooster"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewWithdrawFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewWithdrawFeePeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawShares"): EventFragment;
}

export type ChargePerformanceFeeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; amount: BigNumber; shares: BigNumber }
>;

export type ChargePerformanceFeeEventFilter =
  TypedEventFilter<ChargePerformanceFeeEvent>;

export type ChargeWithdrawFeeEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; amount: BigNumber }
>;

export type ChargeWithdrawFeeEventFilter =
  TypedEventFilter<ChargeWithdrawFeeEvent>;

export type DepositCakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    sender: string;
    amount: BigNumber;
    shares: BigNumber;
    lastDepositedTime: BigNumber;
  }
>;

export type DepositCakeEventFilter = TypedEventFilter<DepositCakeEvent>;

export type NewAdminEvent = TypedEvent<[string], { admin: string }>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export type NewPerformanceFeeEvent = TypedEvent<
  [BigNumber],
  { performanceFee: BigNumber }
>;

export type NewPerformanceFeeEventFilter =
  TypedEventFilter<NewPerformanceFeeEvent>;

export type NewTreasuryEvent = TypedEvent<[string], { treasury: string }>;

export type NewTreasuryEventFilter = TypedEventFilter<NewTreasuryEvent>;

export type NewWithdrawAmountBoosterEvent = TypedEvent<
  [BigNumber],
  { withdrawAmountBooster: BigNumber }
>;

export type NewWithdrawAmountBoosterEventFilter =
  TypedEventFilter<NewWithdrawAmountBoosterEvent>;

export type NewWithdrawFeeEvent = TypedEvent<
  [BigNumber],
  { withdrawFee: BigNumber }
>;

export type NewWithdrawFeeEventFilter = TypedEventFilter<NewWithdrawFeeEvent>;

export type NewWithdrawFeePeriodEvent = TypedEvent<
  [BigNumber],
  { withdrawFeePeriod: BigNumber }
>;

export type NewWithdrawFeePeriodEventFilter =
  TypedEventFilter<NewWithdrawFeePeriodEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PauseEvent = TypedEvent<[], {}>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpauseEvent = TypedEvent<[], {}>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawSharesEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; amount: BigNumber; shares: BigNumber }
>;

export type WithdrawSharesEventFilter = TypedEventFilter<WithdrawSharesEvent>;

export interface CakeFlexibleSideVaultV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CakeFlexibleSideVaultV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WITHDRAW_AMOUNT_BOOSTER(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_WITHDRAW_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_WITHDRAW_AMOUNT_BOOSTER(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    available(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    cakePool(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    inCaseTokensGetStuck(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    performanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawAmountBooster(
      _withdrawAmountBooster: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFee(
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFeePeriod(
      _withdrawFeePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staking(overrides?: CallOverrides): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        lastDepositedTime: BigNumber;
        cakeAtLastUserAction: BigNumber;
        lastUserActionTime: BigNumber;
      }
    >;

    withdraw(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAmountBooster(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WITHDRAW_AMOUNT_BOOSTER(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_WITHDRAW_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_WITHDRAW_AMOUNT_BOOSTER(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  available(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  cakePool(overrides?: CallOverrides): Promise<string>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

  inCaseTokensGetStuck(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerformanceFee(
    _performanceFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawAmountBooster(
    _withdrawAmountBooster: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFee(
    _withdrawFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFeePeriod(
    _withdrawFeePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staking(overrides?: CallOverrides): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      shares: BigNumber;
      lastDepositedTime: BigNumber;
      cakeAtLastUserAction: BigNumber;
      lastUserActionTime: BigNumber;
    }
  >;

  withdraw(
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAmountBooster(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_AMOUNT_BOOSTER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WITHDRAW_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WITHDRAW_AMOUNT_BOOSTER(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    available(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    cakePool(overrides?: CallOverrides): Promise<string>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    inCaseTokensGetStuck(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    setWithdrawAmountBooster(
      _withdrawAmountBooster: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFee(
      _withdrawFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFeePeriod(
      _withdrawFeePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    staking(overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        lastDepositedTime: BigNumber;
        cakeAtLastUserAction: BigNumber;
        lastUserActionTime: BigNumber;
      }
    >;

    withdraw(_shares: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;

    withdrawAmountBooster(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ChargePerformanceFee(address,uint256,uint256)"(
      sender?: string | null,
      amount?: null,
      shares?: null
    ): ChargePerformanceFeeEventFilter;
    ChargePerformanceFee(
      sender?: string | null,
      amount?: null,
      shares?: null
    ): ChargePerformanceFeeEventFilter;

    "ChargeWithdrawFee(address,uint256)"(
      sender?: string | null,
      amount?: null
    ): ChargeWithdrawFeeEventFilter;
    ChargeWithdrawFee(
      sender?: string | null,
      amount?: null
    ): ChargeWithdrawFeeEventFilter;

    "DepositCake(address,uint256,uint256,uint256)"(
      sender?: string | null,
      amount?: null,
      shares?: null,
      lastDepositedTime?: null
    ): DepositCakeEventFilter;
    DepositCake(
      sender?: string | null,
      amount?: null,
      shares?: null,
      lastDepositedTime?: null
    ): DepositCakeEventFilter;

    "NewAdmin(address)"(admin?: null): NewAdminEventFilter;
    NewAdmin(admin?: null): NewAdminEventFilter;

    "NewPerformanceFee(uint256)"(
      performanceFee?: null
    ): NewPerformanceFeeEventFilter;
    NewPerformanceFee(performanceFee?: null): NewPerformanceFeeEventFilter;

    "NewTreasury(address)"(treasury?: null): NewTreasuryEventFilter;
    NewTreasury(treasury?: null): NewTreasuryEventFilter;

    "NewWithdrawAmountBooster(uint256)"(
      withdrawAmountBooster?: null
    ): NewWithdrawAmountBoosterEventFilter;
    NewWithdrawAmountBooster(
      withdrawAmountBooster?: null
    ): NewWithdrawAmountBoosterEventFilter;

    "NewWithdrawFee(uint256)"(withdrawFee?: null): NewWithdrawFeeEventFilter;
    NewWithdrawFee(withdrawFee?: null): NewWithdrawFeeEventFilter;

    "NewWithdrawFeePeriod(uint256)"(
      withdrawFeePeriod?: null
    ): NewWithdrawFeePeriodEventFilter;
    NewWithdrawFeePeriod(
      withdrawFeePeriod?: null
    ): NewWithdrawFeePeriodEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Pause()"(): PauseEventFilter;
    Pause(): PauseEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpause()"(): UnpauseEventFilter;
    Unpause(): UnpauseEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawShares(address,uint256,uint256)"(
      sender?: string | null,
      amount?: null,
      shares?: null
    ): WithdrawSharesEventFilter;
    WithdrawShares(
      sender?: string | null,
      amount?: null,
      shares?: null
    ): WithdrawSharesEventFilter;
  };

  estimateGas: {
    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_AMOUNT_BOOSTER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WITHDRAW_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WITHDRAW_AMOUNT_BOOSTER(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    available(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    cakePool(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    inCaseTokensGetStuck(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawAmountBooster(
      _withdrawAmountBooster: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawFee(
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawFeePeriod(
      _withdrawFeePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAmountBooster(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_PERFORMANCE_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_WITHDRAW_AMOUNT_BOOSTER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_WITHDRAW_FEE_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_DEPOSIT_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_WITHDRAW_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_WITHDRAW_AMOUNT_BOOSTER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    available(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cakePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPricePerFullShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inCaseTokensGetStuck(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawAmountBooster(
      _withdrawAmountBooster: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFee(
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFeePeriod(
      _withdrawFeePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAmountBooster(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
