/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BCakeFarmBoosterProxyFactoryInterface extends utils.Interface {
  functions: {
    "Farm_Booster()": FunctionFragment;
    "cakeToken()": FunctionFragment;
    "createFarmBoosterProxy()": FunctionFragment;
    "masterchefV2()": FunctionFragment;
    "proxyContract(address)": FunctionFragment;
    "proxyUser(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "Farm_Booster",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cakeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createFarmBoosterProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterchefV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "proxyUser", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "Farm_Booster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cakeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createFarmBoosterProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterchefV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxyUser", data: BytesLike): Result;

  events: {
    "NewFarmBoosterProxyContract(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "NewFarmBoosterProxyContract"
  ): EventFragment;
}

export type NewFarmBoosterProxyContractEvent = TypedEvent<
  [string],
  { farmBoosterProxyAddress: string }
>;

export type NewFarmBoosterProxyContractEventFilter =
  TypedEventFilter<NewFarmBoosterProxyContractEvent>;

export interface BCakeFarmBoosterProxyFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BCakeFarmBoosterProxyFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Farm_Booster(overrides?: CallOverrides): Promise<[string]>;

    cakeToken(overrides?: CallOverrides): Promise<[string]>;

    createFarmBoosterProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    masterchefV2(overrides?: CallOverrides): Promise<[string]>;

    proxyContract(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    proxyUser(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  Farm_Booster(overrides?: CallOverrides): Promise<string>;

  cakeToken(overrides?: CallOverrides): Promise<string>;

  createFarmBoosterProxy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  masterchefV2(overrides?: CallOverrides): Promise<string>;

  proxyContract(arg0: string, overrides?: CallOverrides): Promise<string>;

  proxyUser(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    Farm_Booster(overrides?: CallOverrides): Promise<string>;

    cakeToken(overrides?: CallOverrides): Promise<string>;

    createFarmBoosterProxy(overrides?: CallOverrides): Promise<void>;

    masterchefV2(overrides?: CallOverrides): Promise<string>;

    proxyContract(arg0: string, overrides?: CallOverrides): Promise<string>;

    proxyUser(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewFarmBoosterProxyContract(address)"(
      farmBoosterProxyAddress?: string | null
    ): NewFarmBoosterProxyContractEventFilter;
    NewFarmBoosterProxyContract(
      farmBoosterProxyAddress?: string | null
    ): NewFarmBoosterProxyContractEventFilter;
  };

  estimateGas: {
    Farm_Booster(overrides?: CallOverrides): Promise<BigNumber>;

    cakeToken(overrides?: CallOverrides): Promise<BigNumber>;

    createFarmBoosterProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    masterchefV2(overrides?: CallOverrides): Promise<BigNumber>;

    proxyContract(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    proxyUser(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Farm_Booster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createFarmBoosterProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    masterchefV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
