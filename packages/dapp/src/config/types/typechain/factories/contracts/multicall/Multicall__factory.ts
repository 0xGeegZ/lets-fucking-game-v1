/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Multicall,
  MulticallInterface,
} from "../../../contracts/multicall/Multicall";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061068f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806372425d9d1161005b57806372425d9d146100f357806386d516e8146100f9578063a8b0574e146100ff578063ee82ac5e1461010d57600080fd5b80630f28c97d1461008d578063252dba42146100a257806327e86d6e146100c35780634d2301cc146100cb575b600080fd5b425b6040519081526020015b60405180910390f35b6100b56100b0366004610331565b61011f565b6040516100999291906104b3565b61008f61026c565b61008f6100d9366004610553565b73ffffffffffffffffffffffffffffffffffffffff163190565b4461008f565b4561008f565b604051418152602001610099565b61008f61011b366004610575565b4090565b8051439060609067ffffffffffffffff81111561013e5761013e61027f565b60405190808252806020026020018201604052801561017157816020015b606081526020019060019003908161015c5790505b50905060005b8351811015610266576000808583815181106101955761019561058e565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168684815181106101c9576101c961058e565b6020026020010151602001516040516101e291906105bd565b6000604051808303816000865af19150503d806000811461021f576040519150601f19603f3d011682016040523d82523d6000602084013e610224565b606091505b50915091508161023357600080fd5b808484815181106102465761024661058e565b60200260200101819052505050808061025e90610608565b915050610177565b50915091565b6000610279600143610640565b40905090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156102d1576102d161027f565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156103005761030061027f565b604052919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461032c57600080fd5b919050565b6000602080838503121561034457600080fd5b823567ffffffffffffffff8082111561035c57600080fd5b818501915085601f83011261037057600080fd5b8135818111156103825761038261027f565b8060051b6103918582016102d7565b91825283810185019185810190898411156103ab57600080fd5b86860192505b83831015610482578235858111156103c95760008081fd5b86016040601f19828d0381018213156103e25760008081fd5b6103ea6102ae565b6103f58b8501610308565b815282840135898111156104095760008081fd5b8085019450508d603f85011261041f5760008081fd5b8a840135898111156104335761043361027f565b6104438c84601f840116016102d7565b92508083528e8482870101111561045a5760008081fd5b808486018d85013760009083018c0152808b01919091528452505091860191908601906103b1565b9998505050505050505050565b60005b838110156104aa578181015183820152602001610492565b50506000910152565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610545577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030184528151805180885261052681888a0189850161048f565b601f01601f1916969096018501955092840192908401906001016104e1565b509398975050505050505050565b60006020828403121561056557600080fd5b61056e82610308565b9392505050565b60006020828403121561058757600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082516105cf81846020870161048f565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610639576106396105d9565b5060010190565b81810381811115610653576106536105d9565b9291505056fea2646970667358221220a9f24b20d98954872a593a69750ef86ea3ab91c17a78d3011d376491d6e66b0964736f6c63430008100033";

type MulticallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall__factory extends ContractFactory {
  constructor(...args: MulticallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall> {
    return super.deploy(overrides || {}) as Promise<Multicall>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall {
    return super.attach(address) as Multicall;
  }
  override connect(signer: Signer): Multicall__factory {
    return super.connect(signer) as Multicall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallInterface {
    return new utils.Interface(_abi) as MulticallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall {
    return new Contract(address, _abi, signerOrProvider) as Multicall;
  }
}
