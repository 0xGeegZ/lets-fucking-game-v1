/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Multicall3,
  Multicall3Interface,
} from "../../../contracts/multicall/Multicall3";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3Value[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3Value",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBasefee",
    outputs: [
      {
        internalType: "uint256",
        name: "basefee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "chainid",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611e14806100206000396000f3fe6080604052600436106100f35760003560e01c80634d2301cc1161008a578063a8b0574e11610059578063a8b0574e14610325578063bce38bd714610350578063c3077fa914610380578063ee82ac5e146103b2576100f3565b80634d2301cc1461026257806372425d9d1461029f57806382ad56cb146102ca57806386d516e8146102fa576100f3565b80633408e470116100c65780633408e470146101af578063399542e9146101da5780633e64a6961461020c57806342cbb15c14610237576100f3565b80630f28c97d146100f8578063174dea7114610123578063252dba421461015357806327e86d6e14610184575b600080fd5b34801561010457600080fd5b5061010d6103ef565b60405161011a919061146e565b60405180910390f35b61013d600480360381019061013891906114f8565b61041e565b60405161014a91906116ef565b60405180910390f35b61016d60048036038101906101689190611767565b610831565b60405161017b929190611876565b60405180910390f35b34801561019057600080fd5b50610199610b43565b6040516101a691906118bf565b60405180910390f35b3480156101bb57600080fd5b506101c4610b8b565b6040516101d1919061146e565b60405180910390f35b6101f460048036038101906101ef9190611906565b610bbb565b60405161020393929190611966565b60405180910390f35b34801561021857600080fd5b50610221610c2d565b60405161022e919061146e565b60405180910390f35b34801561024357600080fd5b5061024c610c5d565b604051610259919061146e565b60405180910390f35b34801561026e57600080fd5b5061028960048036038101906102849190611a02565b610c8d565b604051610296919061146e565b60405180910390f35b3480156102ab57600080fd5b506102b4610cd6565b6040516102c1919061146e565b60405180910390f35b6102e460048036038101906102df9190611a85565b610d06565b6040516102f191906116ef565b60405180910390f35b34801561030657600080fd5b5061030f610ffc565b60405161031c919061146e565b60405180910390f35b34801561033157600080fd5b5061033a61102c565b6040516103479190611ae1565b60405180910390f35b61036a60048036038101906103659190611906565b61105c565b60405161037791906116ef565b60405180910390f35b61039a60048036038101906103959190611767565b6113b7565b6040516103a993929190611966565b60405180910390f35b3480156103be57600080fd5b506103d960048036038101906103d49190611b28565b611403565b6040516103e691906118bf565b60405180910390f35b600061040567dd2dce5f238991e760c01b611436565b61041866f9321c1297643960c01b611436565b42905090565b606061043467bbbd85a376ea85a760c01b611436565b610448676431f078ec6a4cdb60c01b611436565b61045c67fc1a69b427b448f160c01b611436565b6000610472676da167f59ef7a83160c01b611436565b61048667f132f6ad2198d8cd60c01b611436565b60008484905090506104a267b3d46720c0ceabd960c01b611436565b8067ffffffffffffffff8111156104bc576104bb611b55565b5b6040519080825280602002602001820160405280156104f557816020015b6104e2611439565b8152602001906001900390816104da5790505b50925061050c6712e064f77b4dceda60c01b611436565b61052067983207b20352ad2b60c01b611436565b3661053567bbe285ee0cbd6d9560c01b611436565b61054967e4fd11a0326c01f760c01b611436565b60005b828110156107955761056867245b18a348b8d19260c01b611436565b61057c67bc0e2a403fd567bb60c01b611436565b600085828151811061059157610590611b84565b5b602002602001015190506105af67af8e630ec594a5f360c01b611436565b8787838181106105c2576105c1611b84565b5b90506020028101906105d49190611bc2565b92506105ea67a54e71268bda2e4c60c01b611436565b6105fe6741c976a6637b9cd560c01b611436565b60008360400135905061061b678ba1f30f9f12040a60c01b611436565b61062f678499545c95053bc360c01b611436565b808601955061064867405b1f45d97f9be160c01b611436565b83600001602081019061065b9190611a02565b73ffffffffffffffffffffffffffffffffffffffff16818580606001906106829190611bea565b604051610690929190611c8c565b60006040518083038185875af1925050503d80600081146106cd576040519150601f19603f3d011682016040523d82523d6000602084013e6106d2565b606091505b508360000184602001829052821515151581525050506106fc670cd0a8a37b494e1d60c01b611436565b8151602085013517610760577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b61077467cf1eeb863c19ffa660c01b611436565b61078867aeb71f451dd4ab4960c01b611436565b826001019250505061054c565b506107aa6776b371012604b7d460c01b611436565b6107be677f95e4d098432bd260c01b611436565b6107d2672f8a0368f42227f360c01b611436565b823414610814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080b90611d02565b60405180910390fd5b6108286757bed9e8ba4b8ad260c01b611436565b50505092915050565b6000606061084967f62201d5ac8038f460c01b611436565b61085d67d85976bd67589f3360c01b611436565b43915061087467ffd8c10761c9f34e60c01b611436565b610888671392870d90c9a79660c01b611436565b60008484905090506108a467aab8b37925b5ac8460c01b611436565b8067ffffffffffffffff8111156108be576108bd611b55565b5b6040519080825280602002602001820160405280156108f157816020015b60608152602001906001900390816108dc5790505b50915061090867211bb50e855aae1360c01b611436565b61091c67b8737a658f7b20c760c01b611436565b36610931672e160a80b5bc0e5360c01b611436565b61094567f0ffe50bec09951860c01b611436565b60005b82811015610b395761096467068ac2d4734725ac60c01b611436565b6109786750e0e7a52880c29f60c01b611436565b600061098e6764019b2691b45d7d60c01b611436565b8787838181106109a1576109a0611b84565b5b90506020028101906109b39190611d22565b92506109c96743b02303c1f053c860c01b611436565b8260000160208101906109dc9190611a02565b73ffffffffffffffffffffffffffffffffffffffff16838060200190610a029190611bea565b604051610a10929190611c8c565b6000604051808303816000865af19150503d8060008114610a4d576040519150601f19603f3d011682016040523d82523d6000602084013e610a52565b606091505b50868481518110610a6657610a65611b84565b5b602002602001018190528192505050610a8967dfc71f7a5b93461160c01b611436565b610a9d67818fea5a3f100cea60c01b611436565b610ab1678fa8d04d9a5e08b860c01b611436565b80610af1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae890611d96565b60405180910390fd5b610b0567eb9490d245a0334560c01b611436565b610b1967f6fd227b386dc7f260c01b611436565b610b2d676441cdf6edad19c460c01b611436565b81600101915050610948565b5050509250929050565b6000610b596783398e6574930cfa60c01b611436565b610b6d67f539895fff178cda60c01b611436565b610b816791fe9b395d70ba5b60c01b611436565b6001430340905090565b6000610ba16752f4043fcea0bf3160c01b611436565b610bb567bfaae6b6215496c560c01b611436565b46905090565b6000806060610bd46773e98e7a56b9b3ba60c01b611436565b610be8674cde2bedca5c910060c01b611436565b439250610bff676760ff54f047905260c01b611436565b43409150610c176705e441701453f05560c01b611436565b610c2286868661105c565b905093509350939050565b6000610c4367644cbe8238c76bc360c01b611436565b610c57670ded1845ccfbf3fb60c01b611436565b48905090565b6000610c7367474f7e6d9ea95e9c60c01b611436565b610c87675fb52097ffe2ef3a60c01b611436565b43905090565b6000610ca367e8f6f66b8f39c34860c01b611436565b610cb767203082d08f42bfb460c01b611436565b8173ffffffffffffffffffffffffffffffffffffffff16319050919050565b6000610cec67b0f8504dfa4bdf0060c01b611436565b610d00676263445c9cd41d0b60c01b611436565b44905090565b6060610d1c67d9cc307fa12c032160c01b611436565b610d3067d376f6a6da8cd85b60c01b611436565b610d4467c8d97f2143965d0660c01b611436565b6000838390509050610d606793badcd7b79417f160c01b611436565b8067ffffffffffffffff811115610d7a57610d79611b55565b5b604051908082528060200260200182016040528015610db357816020015b610da0611439565b815260200190600190039081610d985790505b509150610dca67c2fa02407bae52a960c01b611436565b610dde67202fa9939baef27960c01b611436565b36610df367079ba53245949cd360c01b611436565b610e07678f0a72b5c1a5a07a60c01b611436565b60005b82811015610ff357610e266782e04474561cd93f60c01b611436565b610e3a674131f3a5ef20d03b60c01b611436565b6000848281518110610e4f57610e4e611b84565b5b60200260200101519050610e6d676778c4da5473737560c01b611436565b868683818110610e8057610e7f611b84565b5b9050602002810190610e929190611db6565b9250610ea867ff368b1b8cbdc62260c01b611436565b826000016020810190610ebb9190611a02565b73ffffffffffffffffffffffffffffffffffffffff16838060400190610ee19190611bea565b604051610eef929190611c8c565b6000604051808303816000865af19150503d8060008114610f2c576040519150601f19603f3d011682016040523d82523d6000602084013e610f31565b606091505b50826000018360200182905282151515158152505050610f5b673c1fdb41b82d41b160c01b611436565b8051602084013517610fbf577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b610fd367771423e1c517a18d60c01b611436565b610fe7675bb99bfff3c9d8b060c01b611436565b81600101915050610e0a565b50505092915050565b600061101267adb81645f144f22f60c01b611436565b61102667bb21d505913caa5160c01b611436565b45905090565b600061104267be3b97aa3dfc15b460c01b611436565b6110566732278eb23300651560c01b611436565b41905090565b606061107267335d6d468201efd960c01b611436565b611086674e7fc2963e94042d60c01b611436565b61109a67ab5dab5525f7c14a60c01b611436565b60008383905090506110b667769c890bab9e6b2260c01b611436565b8067ffffffffffffffff8111156110d0576110cf611b55565b5b60405190808252806020026020018201604052801561110957816020015b6110f6611439565b8152602001906001900390816110ee5790505b50915061112067e27737582469fc0060c01b611436565b611134675d0c744f8c68fcc560c01b611436565b3661114967b7b1f04e4fea004260c01b611436565b61115d67e9b132bf51b7162b60c01b611436565b60005b828110156113ad5761117c672630fdd422208b2660c01b611436565b611190675288652964390a0860c01b611436565b60008482815181106111a5576111a4611b84565b5b602002602001015190506111c367eb033e420dde273760c01b611436565b8686838181106111d6576111d5611b84565b5b90506020028101906111e89190611d22565b92506111fe6766a610cd1bdfc0bb60c01b611436565b8260000160208101906112119190611a02565b73ffffffffffffffffffffffffffffffffffffffff168380602001906112379190611bea565b604051611245929190611c8c565b6000604051808303816000865af19150503d8060008114611282576040519150601f19603f3d011682016040523d82523d6000602084013e611287565b606091505b508260000183602001829052821515151581525050506112b1672623bca8b88021a860c01b611436565b6112c5678762446d8adf96e860c01b611436565b8715611364576112df676a62ffa4acd7e97260c01b611436565b6112f36726a286edf820135a60c01b611436565b6113076792b9422715cbbba860c01b611436565b806000015161134b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134290611d96565b60405180910390fd5b61135f67bd36f4e20081b9f460c01b611436565b611379565b6113786718392884a773b41b60c01b611436565b5b61138d678b2ab4ed75d9cc3660c01b611436565b6113a167f8b3c4c475105a8960c01b611436565b81600101915050611160565b5050509392505050565b60008060606113d067a15b4925d352981c60c01b611436565b6113e46784206fb0d0c8700960c01b611436565b6113f060018686610bbb565b8093508194508295505050509250925092565b60006114196710c4ca4b0679ad8a60c01b611436565b61142d673826b379958b620760c01b611436565b81409050919050565b50565b6040518060400160405280600015158152602001606081525090565b6000819050919050565b61146881611455565b82525050565b6000602082019050611483600083018461145f565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126114b8576114b7611493565b5b8235905067ffffffffffffffff8111156114d5576114d4611498565b5b6020830191508360208202830111156114f1576114f061149d565b5b9250929050565b6000806020838503121561150f5761150e611489565b5b600083013567ffffffffffffffff81111561152d5761152c61148e565b5b611539858286016114a2565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008115159050919050565b61158681611571565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156115c65780820151818401526020810190506115ab565b60008484015250505050565b6000601f19601f8301169050919050565b60006115ee8261158c565b6115f88185611597565b93506116088185602086016115a8565b611611816115d2565b840191505092915050565b6000604083016000830151611634600086018261157d565b506020830151848203602086015261164c82826115e3565b9150508091505092915050565b6000611665838361161c565b905092915050565b6000602082019050919050565b600061168582611545565b61168f8185611550565b9350836020820285016116a185611561565b8060005b858110156116dd57848403895281516116be8582611659565b94506116c98361166d565b925060208a019950506001810190506116a5565b50829750879550505050505092915050565b60006020820190508181036000830152611709818461167a565b905092915050565b60008083601f84011261172757611726611493565b5b8235905067ffffffffffffffff81111561174457611743611498565b5b6020830191508360208202830111156117605761175f61149d565b5b9250929050565b6000806020838503121561177e5761177d611489565b5b600083013567ffffffffffffffff81111561179c5761179b61148e565b5b6117a885828601611711565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006117ec83836115e3565b905092915050565b6000602082019050919050565b600061180c826117b4565b61181681856117bf565b935083602082028501611828856117d0565b8060005b85811015611864578484038952815161184585826117e0565b9450611850836117f4565b925060208a0199505060018101905061182c565b50829750879550505050505092915050565b600060408201905061188b600083018561145f565b818103602083015261189d8184611801565b90509392505050565b6000819050919050565b6118b9816118a6565b82525050565b60006020820190506118d460008301846118b0565b92915050565b6118e381611571565b81146118ee57600080fd5b50565b600081359050611900816118da565b92915050565b60008060006040848603121561191f5761191e611489565b5b600061192d868287016118f1565b935050602084013567ffffffffffffffff81111561194e5761194d61148e565b5b61195a86828701611711565b92509250509250925092565b600060608201905061197b600083018661145f565b61198860208301856118b0565b818103604083015261199a818461167a565b9050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119cf826119a4565b9050919050565b6119df816119c4565b81146119ea57600080fd5b50565b6000813590506119fc816119d6565b92915050565b600060208284031215611a1857611a17611489565b5b6000611a26848285016119ed565b91505092915050565b60008083601f840112611a4557611a44611493565b5b8235905067ffffffffffffffff811115611a6257611a61611498565b5b602083019150836020820283011115611a7e57611a7d61149d565b5b9250929050565b60008060208385031215611a9c57611a9b611489565b5b600083013567ffffffffffffffff811115611aba57611ab961148e565b5b611ac685828601611a2f565b92509250509250929050565b611adb816119c4565b82525050565b6000602082019050611af66000830184611ad2565b92915050565b611b0581611455565b8114611b1057600080fd5b50565b600081359050611b2281611afc565b92915050565b600060208284031215611b3e57611b3d611489565b5b6000611b4c84828501611b13565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600082356001608003833603038112611bde57611bdd611bb3565b5b80830191505092915050565b60008083356001602003843603038112611c0757611c06611bb3565b5b80840192508235915067ffffffffffffffff821115611c2957611c28611bb8565b5b602083019250600182023603831315611c4557611c44611bbd565b5b509250929050565b600081905092915050565b82818337600083830152505050565b6000611c738385611c4d565b9350611c80838584611c58565b82840190509392505050565b6000611c99828486611c67565b91508190509392505050565b600082825260208201905092915050565b7f4d756c746963616c6c333a2076616c7565206d69736d61746368000000000000600082015250565b6000611cec601a83611ca5565b9150611cf782611cb6565b602082019050919050565b60006020820190508181036000830152611d1b81611cdf565b9050919050565b600082356001604003833603038112611d3e57611d3d611bb3565b5b80830191505092915050565b7f4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000600082015250565b6000611d80601783611ca5565b9150611d8b82611d4a565b602082019050919050565b60006020820190508181036000830152611daf81611d73565b9050919050565b600082356001606003833603038112611dd257611dd1611bb3565b5b8083019150509291505056fea2646970667358221220cd8b55e0477e7a5920066889fffaacb92d9a3c9c99e4edf625e7f79783ec22e764736f6c63430008100033";

type Multicall3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall3__factory extends ContractFactory {
  constructor(...args: Multicall3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall3> {
    return super.deploy(overrides || {}) as Promise<Multicall3>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall3 {
    return super.attach(address) as Multicall3;
  }
  override connect(signer: Signer): Multicall3__factory {
    return super.connect(signer) as Multicall3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall3Interface {
    return new utils.Interface(_abi) as Multicall3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall3 {
    return new Contract(address, _abi, signerOrProvider) as Multicall3;
  }
}
