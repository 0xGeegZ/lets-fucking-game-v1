/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export interface CronUpkeepInterface extends utils.Interface {
  functions: {
    'acceptOwnership()': FunctionFragment
    'addDelegator(address)': FunctionFragment
    'checkUpkeep(bytes)': FunctionFragment
    'createCronJobFromEncodedSpec(address,bytes,bytes)': FunctionFragment
    'deleteCronJob(uint256)': FunctionFragment
    'getActiveCronJobIDs()': FunctionFragment
    'getCronJob(uint256)': FunctionFragment
    'getDelegators()': FunctionFragment
    'getNextCronJobIDs()': FunctionFragment
    'owner()': FunctionFragment
    'pause()': FunctionFragment
    'paused()': FunctionFragment
    'performUpkeep(bytes)': FunctionFragment
    'removeDelegator(address)': FunctionFragment
    's_maxJobs()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpause()': FunctionFragment
    'updateCronJob(uint256,address,bytes,bytes)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptOwnership'
      | 'addDelegator'
      | 'checkUpkeep'
      | 'createCronJobFromEncodedSpec'
      | 'deleteCronJob'
      | 'getActiveCronJobIDs'
      | 'getCronJob'
      | 'getDelegators'
      | 'getNextCronJobIDs'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'performUpkeep'
      | 'removeDelegator'
      | 's_maxJobs'
      | 'transferOwnership'
      | 'unpause'
      | 'updateCronJob',
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'addDelegator', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'checkUpkeep', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(
    functionFragment: 'createCronJobFromEncodedSpec',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(functionFragment: 'deleteCronJob', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'getActiveCronJobIDs', values?: undefined): string
  encodeFunctionData(functionFragment: 'getCronJob', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'getDelegators', values?: undefined): string
  encodeFunctionData(functionFragment: 'getNextCronJobIDs', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'performUpkeep', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'removeDelegator', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 's_maxJobs', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'updateCronJob',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string

  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addDelegator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'checkUpkeep', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'createCronJobFromEncodedSpec', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deleteCronJob', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getActiveCronJobIDs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getCronJob', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getDelegators', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNextCronJobIDs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'performUpkeep', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeDelegator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 's_maxJobs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateCronJob', data: BytesLike): Result

  events: {
    'CronJobCreated(uint256,address,bytes)': EventFragment
    'CronJobDeleted(uint256)': EventFragment
    'CronJobExecuted(uint256,uint256)': EventFragment
    'CronJobUpdated(uint256,address,bytes)': EventFragment
    'DelegatorAdded(address)': EventFragment
    'DelegatorRemoved(address)': EventFragment
    'OwnershipTransferRequested(address,address)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'CronJobCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CronJobDeleted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CronJobExecuted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CronJobUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DelegatorAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DelegatorRemoved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferRequested'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export interface CronJobCreatedEventObject {
  id: BigNumber
  target: string
  handler: string
}
export type CronJobCreatedEvent = TypedEvent<[BigNumber, string, string], CronJobCreatedEventObject>

export type CronJobCreatedEventFilter = TypedEventFilter<CronJobCreatedEvent>

export interface CronJobDeletedEventObject {
  id: BigNumber
}
export type CronJobDeletedEvent = TypedEvent<[BigNumber], CronJobDeletedEventObject>

export type CronJobDeletedEventFilter = TypedEventFilter<CronJobDeletedEvent>

export interface CronJobExecutedEventObject {
  id: BigNumber
  timestamp: BigNumber
}
export type CronJobExecutedEvent = TypedEvent<[BigNumber, BigNumber], CronJobExecutedEventObject>

export type CronJobExecutedEventFilter = TypedEventFilter<CronJobExecutedEvent>

export interface CronJobUpdatedEventObject {
  id: BigNumber
  target: string
  handler: string
}
export type CronJobUpdatedEvent = TypedEvent<[BigNumber, string, string], CronJobUpdatedEventObject>

export type CronJobUpdatedEventFilter = TypedEventFilter<CronJobUpdatedEvent>

export interface DelegatorAddedEventObject {
  target: string
}
export type DelegatorAddedEvent = TypedEvent<[string], DelegatorAddedEventObject>

export type DelegatorAddedEventFilter = TypedEventFilter<DelegatorAddedEvent>

export interface DelegatorRemovedEventObject {
  target: string
}
export type DelegatorRemovedEvent = TypedEvent<[string], DelegatorRemovedEventObject>

export type DelegatorRemovedEventFilter = TypedEventFilter<DelegatorRemovedEvent>

export interface OwnershipTransferRequestedEventObject {
  from: string
  to: string
}
export type OwnershipTransferRequestedEvent = TypedEvent<[string, string], OwnershipTransferRequestedEventObject>

export type OwnershipTransferRequestedEventFilter = TypedEventFilter<OwnershipTransferRequestedEvent>

export interface OwnershipTransferredEventObject {
  from: string
  to: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PausedEventObject {
  account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface UnpausedEventObject {
  account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface CronUpkeep extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: CronUpkeepInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    addDelegator(
      delegator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    checkUpkeep(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, string]>

    createCronJobFromEncodedSpec(
      target: PromiseOrValue<string>,
      handler: PromiseOrValue<BytesLike>,
      encodedCronSpec: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    deleteCronJob(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    getActiveCronJobIDs(overrides?: CallOverrides): Promise<[BigNumber[]]>

    getCronJob(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber] & {
        target: string
        handler: string
        cronString: string
        nextTick: BigNumber
      }
    >

    getDelegators(overrides?: CallOverrides): Promise<[string[]]>

    getNextCronJobIDs(overrides?: CallOverrides): Promise<[BigNumber]>

    owner(overrides?: CallOverrides): Promise<[string]>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    removeDelegator(
      delegator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    s_maxJobs(overrides?: CallOverrides): Promise<[BigNumber]>

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    updateCronJob(
      id: PromiseOrValue<BigNumberish>,
      newTarget: PromiseOrValue<string>,
      newHandler: PromiseOrValue<BytesLike>,
      newEncodedCronSpec: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>
  }

  acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  addDelegator(
    delegator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  checkUpkeep(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, string]>

  createCronJobFromEncodedSpec(
    target: PromiseOrValue<string>,
    handler: PromiseOrValue<BytesLike>,
    encodedCronSpec: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  deleteCronJob(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  getActiveCronJobIDs(overrides?: CallOverrides): Promise<BigNumber[]>

  getCronJob(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, BigNumber] & {
      target: string
      handler: string
      cronString: string
      nextTick: BigNumber
    }
  >

  getDelegators(overrides?: CallOverrides): Promise<string[]>

  getNextCronJobIDs(overrides?: CallOverrides): Promise<BigNumber>

  owner(overrides?: CallOverrides): Promise<string>

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  performUpkeep(
    performData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  removeDelegator(
    delegator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  s_maxJobs(overrides?: CallOverrides): Promise<BigNumber>

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  updateCronJob(
    id: PromiseOrValue<BigNumberish>,
    newTarget: PromiseOrValue<string>,
    newHandler: PromiseOrValue<BytesLike>,
    newEncodedCronSpec: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>

    addDelegator(delegator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    checkUpkeep(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, string]>

    createCronJobFromEncodedSpec(
      target: PromiseOrValue<string>,
      handler: PromiseOrValue<BytesLike>,
      encodedCronSpec: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>

    deleteCronJob(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    getActiveCronJobIDs(overrides?: CallOverrides): Promise<BigNumber[]>

    getCronJob(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber] & {
        target: string
        handler: string
        cronString: string
        nextTick: BigNumber
      }
    >

    getDelegators(overrides?: CallOverrides): Promise<string[]>

    getNextCronJobIDs(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    performUpkeep(performData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>

    removeDelegator(delegator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    s_maxJobs(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>

    updateCronJob(
      id: PromiseOrValue<BigNumberish>,
      newTarget: PromiseOrValue<string>,
      newHandler: PromiseOrValue<BytesLike>,
      newEncodedCronSpec: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    'CronJobCreated(uint256,address,bytes)'(
      id?: PromiseOrValue<BigNumberish> | null,
      target?: null,
      handler?: null,
    ): CronJobCreatedEventFilter
    CronJobCreated(id?: PromiseOrValue<BigNumberish> | null, target?: null, handler?: null): CronJobCreatedEventFilter

    'CronJobDeleted(uint256)'(id?: PromiseOrValue<BigNumberish> | null): CronJobDeletedEventFilter
    CronJobDeleted(id?: PromiseOrValue<BigNumberish> | null): CronJobDeletedEventFilter

    'CronJobExecuted(uint256,uint256)'(
      id?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null,
    ): CronJobExecutedEventFilter
    CronJobExecuted(id?: PromiseOrValue<BigNumberish> | null, timestamp?: null): CronJobExecutedEventFilter

    'CronJobUpdated(uint256,address,bytes)'(
      id?: PromiseOrValue<BigNumberish> | null,
      target?: null,
      handler?: null,
    ): CronJobUpdatedEventFilter
    CronJobUpdated(id?: PromiseOrValue<BigNumberish> | null, target?: null, handler?: null): CronJobUpdatedEventFilter

    'DelegatorAdded(address)'(target?: null): DelegatorAddedEventFilter
    DelegatorAdded(target?: null): DelegatorAddedEventFilter

    'DelegatorRemoved(address)'(target?: null): DelegatorRemovedEventFilter
    DelegatorRemoved(target?: null): DelegatorRemovedEventFilter

    'OwnershipTransferRequested(address,address)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
    ): OwnershipTransferRequestedEventFilter
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
    ): OwnershipTransferRequestedEventFilter

    'OwnershipTransferred(address,address)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter
  }

  estimateGas: {
    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    addDelegator(
      delegator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    checkUpkeep(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    createCronJobFromEncodedSpec(
      target: PromiseOrValue<string>,
      handler: PromiseOrValue<BytesLike>,
      encodedCronSpec: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    deleteCronJob(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    getActiveCronJobIDs(overrides?: CallOverrides): Promise<BigNumber>

    getCronJob(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    getDelegators(overrides?: CallOverrides): Promise<BigNumber>

    getNextCronJobIDs(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    removeDelegator(
      delegator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    s_maxJobs(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    updateCronJob(
      id: PromiseOrValue<BigNumberish>,
      newTarget: PromiseOrValue<string>,
      newHandler: PromiseOrValue<BytesLike>,
      newEncodedCronSpec: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    addDelegator(
      delegator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    checkUpkeep(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    createCronJobFromEncodedSpec(
      target: PromiseOrValue<string>,
      handler: PromiseOrValue<BytesLike>,
      encodedCronSpec: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    deleteCronJob(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    getActiveCronJobIDs(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getCronJob(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getDelegators(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getNextCronJobIDs(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    removeDelegator(
      delegator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    s_maxJobs(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    updateCronJob(
      id: PromiseOrValue<BigNumberish>,
      newTarget: PromiseOrValue<string>,
      newHandler: PromiseOrValue<BytesLike>,
      newEncodedCronSpec: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>
  }
}
