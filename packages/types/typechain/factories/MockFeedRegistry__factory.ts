/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockFeedRegistry,
  MockFeedRegistryInterface,
} from "../MockFeedRegistry";

const _abi = [
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "base",
        type: "address",
      },
      {
        internalType: "address",
        name: "quote",
        type: "address",
      },
    ],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
    ],
    name: "updateAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105ec806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a87a20ce1161005b578063a87a20ce14610105578063b5ab58dc14610121578063b633620c14610151578063bcfd032d1461018157610088565b8063313ce5671461008d57806350d25bcd146100ab578063668a0f02146100c95780638205bf6a146100e7575b600080fd5b6100956101b5565b6040516100a29190610475565b60405180910390f35b6100b36101c6565b6040516100c091906103ec565b60405180910390f35b6100d16101cc565b6040516100de9190610407565b60405180910390f35b6100ef6101d2565b6040516100fc9190610407565b60405180910390f35b61011f600480360381019061011a919061035e565b6101d8565b005b61013b60048036038101906101369190610387565b61024f565b60405161014891906103ec565b60405180910390f35b61016b60048036038101906101669190610387565b610267565b6040516101789190610407565b60405180910390f35b61019b60048036038101906101969190610322565b61027f565b6040516101ac959493929190610422565b60405180910390f35b60008054906101000a900460ff1681565b60015481565b60035481565b60025481565b8060018190555042600281905550600360008154809291906101f9906104f9565b919050555080600460006003548152602001908152602001600020819055504260056000600354815260200190815260200160002081905550426006600060035481526020019081526020016000208190555050565b60046020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b6000806000806000600354600460006003548152602001908152602001600020546006600060035481526020019081526020016000205460056000600354815260200190815260200160002054600354945094509450945094509295509295909350565b6000813590506102f281610571565b92915050565b60008135905061030781610588565b92915050565b60008135905061031c8161059f565b92915050565b6000806040838503121561033557600080fd5b6000610343858286016102e3565b9250506020610354858286016102e3565b9150509250929050565b60006020828403121561037057600080fd5b600061037e848285016102f8565b91505092915050565b60006020828403121561039957600080fd5b60006103a78482850161030d565b91505092915050565b6103b9816104a2565b82525050565b6103c8816104cc565b82525050565b6103d7816104e3565b82525050565b6103e6816104d6565b82525050565b600060208201905061040160008301846103b0565b92915050565b600060208201905061041c60008301846103bf565b92915050565b600060a08201905061043760008301886103ce565b61044460208301876103b0565b61045160408301866103bf565b61045e60608301856103bf565b61046b60808301846103ce565b9695505050505050565b600060208201905061048a60008301846103dd565b92915050565b600061049b826104ac565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b6000610504826104cc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561053757610536610542565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b61057a81610490565b811461058557600080fd5b50565b610591816104a2565b811461059c57600080fd5b50565b6105a8816104cc565b81146105b357600080fd5b5056fea26469706673582212204f949062866b82c6b8ffb88e778cbc67781ac168f1fe4aa081e2746d2cbcbdae64736f6c63430008030033";

export class MockFeedRegistry__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockFeedRegistry> {
    return super.deploy(overrides || {}) as Promise<MockFeedRegistry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockFeedRegistry {
    return super.attach(address) as MockFeedRegistry;
  }
  connect(signer: Signer): MockFeedRegistry__factory {
    return super.connect(signer) as MockFeedRegistry__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockFeedRegistryInterface {
    return new utils.Interface(_abi) as MockFeedRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockFeedRegistry {
    return new Contract(address, _abi, signerOrProvider) as MockFeedRegistry;
  }
}
